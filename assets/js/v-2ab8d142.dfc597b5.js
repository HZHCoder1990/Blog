"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5554],{1825:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2ab8d142",path:"/iOS/open-analysis/Masonry.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"iOS/open-analysis/Masonry.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},160:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h4 id="框架目录结构" tabindex="-1"><a class="header-anchor" href="#框架目录结构" aria-hidden="true">#</a> 框架目录结构</h4><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>Masonry.h\n\t- 头文件\n\nMasUtilities.h\n\t- 宏定义 以及 内联函数\n\nView+MASAdditions.h\n\t- UIView/NSView 分类， 提供 mas_xx 属性、方法做约束\n\nView+MASShorthandAdditions.h\n\t- UIView/NSView 分类， 简化 View+MASAdditions.h 属性以及方法前缀\n\nViewController+MASAdditions.h\n\t- UIViewController 分类， 提供 topLayoutGuide 等约束\n\nNSArray+MASAdditions.h\n\t- 数组分类，提供类似批处理功能\n\t\nNSArray+MASShorthandAdditions.h\n\t- 数组分类，提供类似批处理工程，方法名称去掉 mas_ 前缀\n\t\nMASConstraint.h\n\t- 约束类，实现了链式编程的语法\nMASContraint+Private.h\n\t- 定义约束类的抽象接口， 定义约束类相关的协议\n\nMASCompositeConstraint.h\n\t- 表示一组约束对象，继承自 MASConstraint\n\t\nMASConstraintMaker.h\n\t- 表示单个约束对象，继承自 MASConstraint\n\nMASViewAttribute.h\n\t- 存储约束对象以及该对象的约束属性\n\t\nMASConstraintMaker.h\n\t- 工厂方法，用于创建约束对象\n\t\nMASLayoutConstrain.h\n\t- 继承自 NSLayoutConstraint， 用于Debug\n\nNSLayoutConstraint+MASDebugAdditions.h\n\t- NSLayoutConstraint 分类， 用于Debug\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h4 id="源码实现" tabindex="-1"><a class="header-anchor" href="#源码实现" aria-hidden="true">#</a> 源码实现</h4><p>根据下面一个例子来看源码实现。</p><p>创建一个子视图，距离父视图的边缘20， 使用 Masonry 添加约束。</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>UIView *superview = self.view;\n\nUIView *view = [[UIView alloc] init];\nview1.backgroundColor = [UIColor greenColor];\n[superview addSubview:view];\n\nUIEdgeInsets padding = UIEdgeInsetsMake(20, 20, 20, 20);\n\n[view mas_makeConstraints:^(MASConstraintMaker *make) {\n    make.top.equalTo(superview.mas_top).offset(padding.top); \n    make.left.equalTo(superview.mas_left).offset(padding.left);\n    make.bottom.equalTo(superview.mas_bottom).offset(-padding.bottom);\n    make.right.equalTo(superview.mas_right).offset(-padding.right);\n}];\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="mas-makeconstraints-方法实现" tabindex="-1"><a class="header-anchor" href="#mas-makeconstraints-方法实现" aria-hidden="true">#</a> <code>mas_makeConstraints:</code> 方法实现：</h5><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *))block {\n    self.translatesAutoresizingMaskIntoConstraints = NO;\n    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:self];\n    block(constraintMaker);\n    return [constraintMaker install];\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h6 id="_1-禁用-translatesautoresizingmaskintoconstraints" tabindex="-1"><a class="header-anchor" href="#_1-禁用-translatesautoresizingmaskintoconstraints" aria-hidden="true">#</a> 1. 禁用 <code>translatesAutoresizingMaskIntoConstraints</code> ；</h6><p>默认情况下 UIView 上的 <code>autoresizing mask</code> 会产生约束条件，以完全确定视图的位置, <code>AutoLayout</code> 会自动根据 UIView 的 <code>frame</code> 等来确定视图的位置。 当需要自定义约束时， 需要禁用该属性。</p><h6 id="_2-构造-masconstraintmaker-对象" tabindex="-1"><a class="header-anchor" href="#_2-构造-masconstraintmaker-对象" aria-hidden="true">#</a> 2. 构造 <code>MASConstraintMaker</code> 对象；</h6><p><code>MASConstraintMaker</code> 是一个工厂类， 其构造方法如下：</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>- (id)initWithView:(MAS_VIEW *)view {\n    self = [super init];\n    if (!self) return nil;\n    \n    self.view = view;\n    self.constraints = NSMutableArray.new;\n    \n    return self;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>存储当前视图(弱引用)；</p><p>初始化约束数组；</p><h6 id="_3-执行-block" tabindex="-1"><a class="header-anchor" href="#_3-执行-block" aria-hidden="true">#</a> 3. 执行 <code>block</code> ；</h6><p><code>mas_makeConstraints:</code> 方法传入了一个 block 作为函数参数， 该 block 无返回值，参数是一个 <code>MASConstraintMaker</code> 对象。 我们所有的约束都是在这个block 里面设定的。</p><p>根据代码看看约束如何创建：</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>make.top.equalTo(superview.mas_top).offset(padding.top); \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>首先 <code>make.top</code> 是调用 <code>MASConstraintMaker</code> 对象的 <code>top</code> 属性的 <code>get</code> 方法， 该方法返回一个 <code>MASConstraint</code> 对象；</p><p>该 <code>get</code> 方法执行流程如下:</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>// MASConstraintMaker.m\n\n- (MASConstraint *)top {\n    return [self addConstraintWithLayoutAttribute:NSLayoutAttributeTop];\n}\n\n- (MASConstraint *)addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {\n    return [self constraint:nil addConstraintWithLayoutAttribute:layoutAttribute];\n}\n\n- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {\n  \t// constraint 为 nil\n  \t// layoutAttribute 为 NSLayoutAttributeTop\n  \t\n  \t// 构造约束视图的信息\n    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:self.view layoutAttribute:layoutAttribute];\n  \t\n  \t// 根据约束视图信息，构造约束对象\n    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];\n  \n    if ([constraint isKindOfClass:MASViewConstraint.class]) {\n        //replace with composite constraint\n        NSArray *children = @[constraint, newConstraint];\n        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];\n        compositeConstraint.delegate = self;\n        [self constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];\n        return compositeConstraint;\n    }\n  \t// constrain 为空，为新构造的 constrain 对象设置代理\n  \t// 并把该 constrain 对象存储在约束数组内，供后续使用\n    if (!constraint) {\n        newConstraint.delegate = self;\n        [self.constraints addObject:newConstraint];\n    }\n  \t// 返回新创建的约束对象， 该对象的实际类型是 MASViewConstraint\n    return newConstraint;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>其次 <code>.equalTo(superview.mas_top)</code> 会根据 <code>make.top</code> 返回的 <code>MASConstraint</code> 对象( 该对象的实际类型是 <strong>MASViewConstraint</strong>) 去执行 <code>equalTo</code> 方法返回的 block ：</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>// MASConstraint.m\n\n- (MASConstraint * (^)(id))equalTo {\n    return ^id(id attribute) {\n        return self.equalToWithRelation(attribute, NSLayoutRelationEqual);\n    };\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>equalTo</code> 方法会去调用 <code>equalToWithRelation</code> 方法， 因为 <code>equalToWithRelation</code> 方法需要在子类实现， 实际会调用到 <code>MASViewConstraint</code> 中， 因为 <code>MASViewConstraint</code> 重新实现了 <code>equalToWithRelation</code> 方法 (该方法返回了一个 block， 该 block 的返回值是 <code>MASConstraint</code> 对象，此处实际返回的当前的 <code>MASViewConstraint</code> 对象， block 有2个参数， 第一个参数为 <code>superview.mas_top</code> ，第二个参数为 <code>NSLayoutRelationEqual</code>)</p><p><code>superview.mas_top</code> 执行流程为:</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>// View+MASAdditions.m\n\n- (MASViewAttribute *)mas_top {\n    return [[MASViewAttribute alloc] initWithView:self layoutAttribute:NSLayoutAttributeTop];\n}\n\n// MASViewAttribute.m\n- (id)initWithView:(MAS_VIEW *)view layoutAttribute:(NSLayoutAttribute)layoutAttribute {\n    self = [self initWithView:view item:view layoutAttribute:layoutAttribute];\n    return self;\n}\n\n- (id)initWithView:(MAS_VIEW *)view item:(id)item layoutAttribute:(NSLayoutAttribute)layoutAttribute {\n    self = [super init];\n    if (!self) return nil;\n    \n    _view = view;\n    _item = item;\n    _layoutAttribute = layoutAttribute;\n    \n    return self;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>主要是构建约束对象。</p><p><code>equalToWithRelation</code> 执行流程为:</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>// MASViewConstraint.m\n\n- (MASConstraint * (^)(id, NSLayoutRelation))equalToWithRelation {\n    return ^id(id attribute, NSLayoutRelation relation) {\n      \t// attribute 为 MASViewAttribute 对象\n      \t// relation  为 NSLayoutRelationEqual\n        if ([attribute isKindOfClass:NSArray.class]) {\n            NSAssert(!self.hasLayoutRelation, @&quot;Redefinition of constraint relation&quot;);\n            NSMutableArray *children = NSMutableArray.new;\n            for (id attr in attribute) {\n                MASViewConstraint *viewConstraint = [self copy];\n                viewConstraint.layoutRelation = relation;\n                viewConstraint.secondViewAttribute = attr;\n                [children addObject:viewConstraint];\n            }\n            MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];\n            compositeConstraint.delegate = self.delegate;\n            [self.delegate constraint:self shouldBeReplacedWithConstraint:compositeConstraint];\n            return compositeConstraint;\n        } else {\n            NSAssert(!self.hasLayoutRelation || self.layoutRelation == relation &amp;&amp; [attribute isKindOfClass:NSValue.class], @&quot;Redefinition of constraint relation&quot;);\n            \n          \t// 存储约束对象间的线性等式关系，此处为 NSLayoutRelationEqual\n          \tself.layoutRelation = relation;\n          \t\n          \t// 存储第二个约束对象， 此处主要是 存储 superview 的 NSLayoutAttributeTop 约束属性\n            self.secondViewAttribute = attribute;\n          \n            return self;\n        }\n    };\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><code>make.top.equalTo(superview.mas_top)</code> 执行完毕后，还是会返回由 <code>make.top</code> 里面创建的 <code>MASViewConstraint</code> 约束对象。</p><p><code>.offset(padding.top); </code> 会实际执行 <code>MASViewConstraint</code> 内的 <code>setOffset:</code> 方法， 此处参数为 20。</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>// MASViewConstraint.m\n\n- (void)setOffset:(CGFloat)offset {\n  \t// 重写了 setLayoutConstant: 方法， 此处会给 _layoutConstant 赋值为 20。\n    self.layoutConstant = offset;\n}\n\n- (void)setLayoutConstant:(CGFloat)layoutConstant {\n    _layoutConstant = layoutConstant;\n\n#if TARGET_OS_MAC &amp;&amp; !(TARGET_OS_IPHONE || TARGET_OS_TV)\n    if (self.useAnimator) {\n        [self.layoutConstraint.animator setConstant:layoutConstant];\n    } else {\n        self.layoutConstraint.constant = layoutConstant;\n    }\n#else\n    self.layoutConstraint.constant = layoutConstant;\n#endif\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>到此一条约束 <code>make.top.equalTo(superview.mas_top).offset(padding.top); </code> 执行完毕， 其它约束情况类似。</p><h6 id="_4-执行-masconstraintmaker-对象内的-install-方法" tabindex="-1"><a class="header-anchor" href="#_4-执行-masconstraintmaker-对象内的-install-方法" aria-hidden="true">#</a> 4. 执行 <code>MASConstraintMaker</code> 对象内的 <code>install</code> 方法；</h6><p>该方法会依次去执行每个约束对象(<code>MASViewConstraint</code>) 的 install 方法:</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>// MASConstraintMaker.m\n- (NSArray *)install {\n    if (self.removeExisting) {\n        NSArray *installedConstraints = [MASViewConstraint installedConstraintsForView:self.view];\n        for (MASConstraint *constraint in installedConstraints) {\n            [constraint uninstall];\n        }\n    }\n  \t// 复制所有的约束对象\n    NSArray *constraints = self.constraints.copy;\n    for (MASConstraint *constraint in constraints) {\n        constraint.updateExisting = self.updateExisting;\n      \t// 每个约束对象执行 install 方法\n        [constraint install];\n    }\n    [self.constraints removeAllObjects];\n    return constraints;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>// MASViewConstraint.m\n\n- (void)install {\n   if (self.hasBeenInstalled) {\n       return;\n   }\n   \n   if ([self supportsActiveProperty] &amp;&amp; self.layoutConstraint) {\n       self.layoutConstraint.active = YES;\n       [self.firstViewAttribute.view.mas_installedConstraints addObject:self];\n       return;\n   }\n   // 取出第一个和第二个约束视图，以及各自的约束属性\n   MAS_VIEW *firstLayoutItem = self.firstViewAttribute.item;\n   NSLayoutAttribute firstLayoutAttribute = self.firstViewAttribute.layoutAttribute;\n   MAS_VIEW *secondLayoutItem = self.secondViewAttribute.item;\n   NSLayoutAttribute secondLayoutAttribute = self.secondViewAttribute.layoutAttribute;\n\n   // alignment attributes must have a secondViewAttribute\n   // therefore we assume that is refering to superview\n   // eg make.left.equalTo(@10)\n   if (!self.firstViewAttribute.isSizeAttribute &amp;&amp; !self.secondViewAttribute) {\n       secondLayoutItem = self.firstViewAttribute.view.superview;\n       secondLayoutAttribute = firstLayoutAttribute;\n   }\n   \n \t// 构造 NSLayoutConstraint 约束对象\n   MASLayoutConstraint *layoutConstraint\n       = [MASLayoutConstraint constraintWithItem:firstLayoutItem\n                                       attribute:firstLayoutAttribute\n                                       relatedBy:self.layoutRelation\n                                          toItem:secondLayoutItem\n                                       attribute:secondLayoutAttribute\n                                      multiplier:self.layoutMultiplier\n                                        constant:self.layoutConstant];\n   // 设置优先级\n   layoutConstraint.priority = self.layoutPriority;\n \t// 设置调试的 key 值\n   layoutConstraint.mas_key = self.mas_key;\n   \n   if (self.secondViewAttribute.view) {\n     \t// 若第二个约束视图存在， 则约束添加在两个约束视图最近的父视图上\n       MAS_VIEW *closestCommonSuperview = [self.firstViewAttribute.view mas_closestCommonSuperview:self.secondViewAttribute.view];\n       NSAssert(closestCommonSuperview,\n                @&quot;couldn&#39;t find a common superview for %@ and %@&quot;,\n                self.firstViewAttribute.view, self.secondViewAttribute.view);\n       self.installedView = closestCommonSuperview;\n   } else if (self.firstViewAttribute.isSizeAttribute) {\n     \t// 约束宽高， 则约束添加在第一个约束视图上\n       self.installedView = self.firstViewAttribute.view;\n   } else {\n     \t// 约束添加在第一个约束视图的父视图上\n       self.installedView = self.firstViewAttribute.view.superview;\n   }\n\n\n   MASLayoutConstraint *existingConstraint = nil;\n   if (self.updateExisting) {\n       existingConstraint = [self layoutConstraintSimilarTo:layoutConstraint];\n   }\n   if (existingConstraint) {\n       // just update the constant\n       existingConstraint.constant = layoutConstraint.constant;\n       self.layoutConstraint = existingConstraint;\n   } else {\n     \t// 添加约束\n       [self.installedView addConstraint:layoutConstraint];\n     \t// 存储约束(弱引用)\n       self.layoutConstraint = layoutConstraint;\n     \t// 存储约束对象， 方便以后好卸载该约束\n       [firstLayoutItem.mas_installedConstraints addObject:self];\n   }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><h4 id="学习收获" tabindex="-1"><a class="header-anchor" href="#学习收获" aria-hidden="true">#</a> 学习收获</h4><h5 id="链式调用" tabindex="-1"><a class="header-anchor" href="#链式调用" aria-hidden="true">#</a> 链式调用</h5><p>block 通常作为函数的参数用的比较多， 但是block作为返回值，则可以写出链式调用的优雅语法:</p><p>定义一个计算器类， 实现加减乘除。</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>interface Caculator : NSObject\n\n@property (nonatomic, assign, readonly) CGFloat result;\n\n- (Caculator * (^) (CGFloat number))addition;\n\n- (Caculator * (^) (CGFloat number))substraction;\n\n- (Caculator * (^) (CGFloat number))multiplication;\n\n- (Caculator * (^) (CGFloat number))division;\n@end\n\n@implementation Caculator\n\n- (Caculator * _Nonnull (^)(CGFloat))addition {\n    return ^Caculator *(CGFloat number) {\n        self -&gt; _result += number;\n        return self;\n    };\n}\n\n- (Caculator * _Nonnull (^)(CGFloat))substraction {\n    return ^Caculator *(CGFloat number) {\n        self -&gt; _result -= number;\n        return self;\n    };\n}\n\n- (Caculator * _Nonnull (^)(CGFloat))multiplication {\n    return ^Caculator *(CGFloat number) {\n        self -&gt; _result *= number;\n        return self;\n    };\n}\n\n- (Caculator * _Nonnull (^)(CGFloat))division {\n    return ^Caculator *(CGFloat number) {\n        self -&gt; _result /= number;\n        return self;\n    };\n}\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>定义一个分类，负责调用。</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>@interface NSObject (Caculator)\n\n- (CGFloat)caculate:(void (^)(Caculator *caculate))block;\n\n@end\n\n@implementation NSObject (Caculator)\n\n- (CGFloat)caculate:(void (^)(Caculator * _Nonnull))block {\n    Caculator *caculate = [[Caculator alloc] init];\n    block(caculate);\n    return caculate.result;\n}\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>测试如下代码， 结果输出为 6 。</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>CGFloat result = [NSObject caculate:^(Caculator * _Nonnull caculate) {\n  \t// 0 + 10 = 10\n  \t// 10 - 2 = 8\n  \t// 8 / 4 = 2\n  \t// 2 * 3 = 6\n    caculate.addition(10).substraction(2).division(4).multiplication(3);\n}];\n\nNSLog(@&quot;result : %.f&quot;, result);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',47),r={},t=(0,a(3744).Z)(r,[["render",function(n,s){return e}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);