"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5806],{3270:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-37437edb",path:"/iOS/vapor-tutorial.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"iOS/vapor-tutorial.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},1071:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(6252);const t=(0,p.uE)('<p align="right">2021-7-23</p><p>内容简介：</p><ol><li>安装 vapor</li><li>新建 vapor 工程</li><li>创建数据库表（SQLite 数据库）</li><li>编写 CURD 接口</li><li>进行接口测试</li></ol><h4 id="环境" tabindex="-1"><a class="header-anchor" href="#环境" aria-hidden="true">#</a> 环境</h4><p>Xcode 12.2</p><p>Swift 5.3.1</p><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>brew <span class="token function">install</span> vapor\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>下载完成之后通过 <code>vapor --help</code> 查看使用信息</p><h4 id="新建工程" tabindex="-1"><a class="header-anchor" href="#新建工程" aria-hidden="true">#</a> 新建工程</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>vapor new <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>新建一个 ToDoList 工程 (使用 <code>fluent</code> 并选择 <code>SQLite</code> 存储数据, 不使用 <code>leaf</code> )，命令行输出如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ vapor new ToDoList    \nCloning template<span class="token punctuation">..</span>.\nname: ToDoList\nWould you like to use Fluent? <span class="token punctuation">(</span>--fluent/--no-fluent<span class="token punctuation">)</span>\ny/n<span class="token operator">&gt;</span> y\nfluent: Yes\ndb: SQLite\nWould you like to use Leaf? <span class="token punctuation">(</span>--leaf/--no-leaf<span class="token punctuation">)</span>\ny/n<span class="token operator">&gt;</span> n\nleaf: No\nGenerating project files\n+ Package.swift\n+ main.swift\n+ configure.swift\n+ routes.swift\n+ Todo.swift\n+ CreateTodo.swift\n+ .gitkeep\n+ TodoController.swift\n+ AppTests.swift\n+ Dockerfile\n+ docker-compose.yml\n+ .gitignore\n+ .dockerignore\nCreating <span class="token function">git</span> repository\nAdding first commit\n                                                                                   \n                                                                  **               \n                                                                **~~**             \n                                                              **~~~~~~**           \n                                                            **~~~~~~~~~~**         \n                                                          **~~~~~~~~~~~~~~**       \n                                                        **~~~~~~~~~~~~~~~~~~**     \n                                                      **~~~~~~~~~~~~~~~~~~~~~~**   \n                                                     **~~~~~~~~~~~~~~~~~~~~~~~~**  \n                                                    **~~~~~~~~~~~~~~~~~~~~~~~~~~** \n                                                   **~~~~~~~~~~~~~~~~~~~~~~~~~~~~**\n                                                   **~~~~~~~~~~~~~~~~~~~~~~~~~~~~**\n                                                   **~~~~~~~~~~~~~~~~~~~~~++++~~~**\n                                                    **~~~~~~~~~~~~~~~~~~~++++~~~** \n                                                     ***~~~~~~~~~~~~~~~++++~~~***  \n                                                       ****~~~~~~~~~~++++~~****    \n                                                          *****~~~~~~~~~*****      \n                                                             *************         \n                                                                                   \n                                                    _       __    ___   ___   ___  \n                                                   <span class="token punctuation">\\</span> <span class="token punctuation">\\</span>  /  / /<span class="token punctuation">\\</span>  <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> / / <span class="token punctuation">\\</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> \n                                                    <span class="token punctuation">\\</span>_<span class="token punctuation">\\</span>/  /_/--<span class="token punctuation">\\</span> <span class="token operator">|</span>_<span class="token operator">|</span>   <span class="token punctuation">\\</span>_<span class="token punctuation">\\</span>_/ <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">\\</span> \n                                                      a web framework <span class="token keyword">for</span> Swift    \n                                                                                   \n                                                  Project ToDoList has been created<span class="token operator">!</span>\n                                                                   \n                                           Use <span class="token builtin class-name">cd</span> <span class="token string">&#39;ToDoList&#39;</span> to enter the project directory\n                                             Use vapor xcode to <span class="token function">open</span> the project <span class="token keyword">in</span> Xcode\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h5 id="打开工程" tabindex="-1"><a class="header-anchor" href="#打开工程" aria-hidden="true">#</a> 打开工程</h5><ol><li>进入到项目目录</li><li>终端运行 <code>vapor xcode</code> 命令打开工程；</li><li>双击 Package.swift 文件打开工程</li></ol><h5 id="项目目录结构" tabindex="-1"><a class="header-anchor" href="#项目目录结构" aria-hidden="true">#</a> 项目目录结构</h5><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">.</span>\n├── Dockerfile\n├── Package.swift\n├── Sources\n│   ├── App\n│   │   ├── Controllers\n│   │   │   └── TodoController.swift\n│   │   ├── Migrations\n│   │   │   └── CreateTodo.swift\n│   │   ├── Models\n│   │   │   └── Todo.swift\n│   │   ├── configure.swift\n│   │   └── routes.swift\n│   └── Run\n│       └── main.swift\n├── Tests\n│   └── AppTests\n│       └── AppTests.swift\n└── docker-compose.yml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>打开 vapor 自动创建的模版工程，Xcode开始自动下载所需要的模块，等待下载完毕。</p><h5 id="设置工作目录" tabindex="-1"><a class="header-anchor" href="#设置工作目录" aria-hidden="true">#</a> 设置工作目录</h5><p>Xcode 默认会在 <code>DervedData</code> 目录下运行。 未设置自定义的工作目录， vapor 会提示</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span> WARNING <span class="token punctuation">]</span> No custom working directory <span class="token builtin class-name">set</span> <span class="token keyword">for</span> this scheme, using /path/to/DerivedData/project-abcdef/Build/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>首先找到 Scheme 选择器，点击<code>Edit Scheme</code> ，在对话框中选中 <code>Run</code> ，选中 <code>Options</code> ，勾选 <code>Use custom working directory:</code> 设置工作目录。</p><h5 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h5><h6 id="编写表结构" tabindex="-1"><a class="header-anchor" href="#编写表结构" aria-hidden="true">#</a> 编写表结构</h6><ol><li>在 <code>Models</code> 文件夹下找到 <code>Todo.swift</code> 文件， 默认有 一个 <code>id</code> 和 <code>title</code> 字段，新添加 <code>completed</code> 和 <code>order</code> 字段</li></ol><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">Fluent</span>\n<span class="token keyword">import</span> <span class="token class-name">Vapor</span>\n\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Todo</span><span class="token punctuation">:</span> <span class="token class-name">Model</span><span class="token punctuation">,</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>\n  \t<span class="token comment">// 数据库中表的名称</span>\n    <span class="token keyword">static</span> <span class="token keyword">let</span> schema <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span>\n    \n    <span class="token attribute atrule">@ID</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token constant">UUID</span><span class="token operator">?</span>\n\n    <span class="token attribute atrule">@Field</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;title&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>\n    \n    <span class="token attribute atrule">@Field</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;completed&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> completed<span class="token punctuation">:</span> <span class="token class-name">Bool</span>\n    \n    <span class="token attribute atrule">@Field</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;order&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> order<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span>\n\n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">init</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token constant">UUID</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> completed<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id\n        <span class="token keyword">self</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title\n        <span class="token keyword">self</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> completed\n        <span class="token keyword">self</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ol start="2"><li>在 <code>Migrations</code> 文件夹下找到 <code>CreateTodo.swift</code> 文件，为新加的字段设置在数据库表中的类型、默认值、是否必须等信息。</li></ol><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">Fluent</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">CreateTodo</span><span class="token punctuation">:</span> <span class="token class-name">Migration</span> <span class="token punctuation">{</span>\n    <span class="token keyword">func</span> <span class="token function-definition function">prepare</span><span class="token punctuation">(</span>on database<span class="token punctuation">:</span> <span class="token class-name">Database</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">EventLoopFuture</span><span class="token operator">&lt;</span><span class="token class-name">Void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> database<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 数据库中表的名称</span>\n            <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// id 字段</span>\n            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;title&quot;</span></span><span class="token punctuation">,</span> <span class="token punctuation">.</span>string<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token keyword">required</span><span class="token punctuation">)</span> <span class="token comment">// title 字段</span>\n            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;completed&quot;</span></span><span class="token punctuation">,</span> <span class="token punctuation">.</span>bool<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token keyword">required</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;DEFAULT false&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// completed 字段</span>\n            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;order&quot;</span></span><span class="token punctuation">,</span> <span class="token punctuation">.</span>int<span class="token punctuation">)</span> <span class="token comment">// order 字段</span>\n            <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建表</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">func</span> <span class="token function-definition function">revert</span><span class="token punctuation">(</span>on database<span class="token punctuation">:</span> <span class="token class-name">Database</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">EventLoopFuture</span><span class="token operator">&lt;</span><span class="token class-name">Void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> database<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h6 id="生成表文件" tabindex="-1"><a class="header-anchor" href="#生成表文件" aria-hidden="true">#</a> 生成表文件</h6><p>方式一：</p><p>在命令行中执行： <code>vapor run migrate</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ vapor run migrate\n<span class="token punctuation">[</span><span class="token number">4</span>/4<span class="token punctuation">]</span> Linking Run\nMigrate Command: Prepare\nThe following migration<span class="token punctuation">(</span>s<span class="token punctuation">)</span> will be prepared:\n+ App.CreateTodo on default\nWould you like to continue?\ny/n<span class="token operator">&gt;</span> y\nMigration successful\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>方式二：</p><p>在 <code>configure.swift</code> 文件中的 <code>app.migrations.add(CreateTodo())</code> 下面添加 <code>try app.autoMigrate().wait()</code></p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">Fluent</span>\n<span class="token keyword">import</span> <span class="token class-name">FluentSQLiteDriver</span>\n<span class="token keyword">import</span> <span class="token class-name">Vapor</span>\n\n<span class="token comment">// configures your application</span>\n<span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">configure</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> app<span class="token punctuation">:</span> <span class="token class-name">Application</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n    <span class="token comment">// uncomment to serve files from /Public folder</span>\n    <span class="token comment">// app.middleware.use(FileMiddleware(publicDirectory: app.directory.publicDirectory))</span>\n\n    app<span class="token punctuation">.</span>databases<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">sqlite</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;db.sqlite&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>sqlite<span class="token punctuation">)</span>\n\n    app<span class="token punctuation">.</span>migrations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">CreateTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  \t<span class="token keyword">try</span> app<span class="token punctuation">.</span><span class="token function">autoMigrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    \n  \t<span class="token comment">// register routes</span>\n    <span class="token keyword">try</span> <span class="token function">routes</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>执行完成之后，会在项目目录下创建 <code>db.sqlite</code> 文件，同时生成 <code>todos</code> 表。 <code>todos</code> 表的建表语句如下：</p><div class="language-sqlite ext-sqlite line-numbers-mode"><pre class="language-sqlite"><code>CREATE TABLE &quot;todos&quot;(\n&quot;id&quot; UUID PRIMARY KEY, \n&quot;title&quot; TEXT NOT NULL, \n&quot;completed&quot; INTEGER NOT NULL DEFAULT false, \n&quot;order&quot; INTEGER)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="编写api" tabindex="-1"><a class="header-anchor" href="#编写api" aria-hidden="true">#</a> 编写API</h5><p>在 Models 文件夹下创建 <code>TodoAPIModel.swift</code> 文件, 用来代表数据库中返回的 <code>Todo</code> 对象</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token class-name">Vapor</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">TodoAPIModel</span><span class="token punctuation">:</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Todo</span><span class="token punctuation">.</span><span class="token class-name">IDValue</span>\n    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>\n    <span class="token keyword">let</span> completed<span class="token punctuation">:</span> <span class="token class-name">Bool</span>\n    <span class="token keyword">let</span> order<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span>\n    <span class="token keyword">let</span> url<span class="token punctuation">:</span> <span class="token class-name">String</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">extension</span> <span class="token class-name">TodoAPIModel</span> <span class="token punctuation">{</span>\n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> todo<span class="token punctuation">:</span> <span class="token class-name">Todo</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">try</span> todo<span class="token punctuation">.</span><span class="token function">requireID</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>title <span class="token operator">=</span> todo<span class="token punctuation">.</span>title\n        <span class="token keyword">self</span><span class="token punctuation">.</span>completed <span class="token operator">=</span> todo<span class="token punctuation">.</span>completed\n        <span class="token keyword">self</span><span class="token punctuation">.</span>order <span class="token operator">=</span> todo<span class="token punctuation">.</span>order\n        <span class="token keyword">self</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;http://127.0.0.1:8080/todos/</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token keyword">self</span><span class="token punctuation">.</span>id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>开始编写 增、删、改、查 的API接口</p><h5 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> Create</h5><ol><li>创建模型（title 为必传参数， order 为可选），同时需要校验传递过来的参数，是否符合规范</li></ol><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">struct</span> <span class="token class-name">CreateRequestBody</span><span class="token punctuation">:</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span>\n    <span class="token keyword">let</span> order<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span>\n\n    <span class="token keyword">func</span> <span class="token function-definition function">makeTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> title<span class="token punctuation">,</span> completed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> order<span class="token punctuation">:</span> order<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">extension</span> <span class="token class-name">CreateRequestBody</span><span class="token punctuation">:</span> <span class="token class-name">Validatable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">validations</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> validations<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Validations</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      \t<span class="token comment">// title 不为空，且大于1个字符</span>\n        validations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;title&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token operator">!</span><span class="token punctuation">.</span>empty <span class="token operator">&amp;&amp;</span> <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n       <span class="token comment">// order 需要大于0</span>\n        validations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;order&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">required</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="2"><li>在 <code>TodoController.swift</code> 文件内编写API</li></ol><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span>routes<span class="token punctuation">:</span> <span class="token class-name">RoutesBuilder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> todos <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">grouped</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span><span class="token punctuation">)</span>\n    todos<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>use<span class="token punctuation">:</span> create<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">EventLoopFuture</span><span class="token operator">&lt;</span><span class="token class-name">TodoAPIModel</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 校验传递参数</span>\n    <span class="token keyword">try</span> <span class="token class-name">CreateRequestBody</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> req<span class="token punctuation">)</span>\n  \t\n  \t<span class="token comment">// 参数转为 CreateRequestBody 模型</span>\n    <span class="token keyword">let</span> requestBody <span class="token operator">=</span> <span class="token keyword">try</span> req<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">CreateRequestBody</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>\n  \t\n  \t<span class="token comment">// 构建 Todo 模型</span>\n    <span class="token keyword">let</span> todo <span class="token operator">=</span> requestBody<span class="token punctuation">.</span><span class="token function">makeTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    \n  \t<span class="token keyword">return</span> todo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> req<span class="token punctuation">.</span>db<span class="token punctuation">)</span> <span class="token comment">// 存入数据库</span>\n        <span class="token punctuation">.</span>flatMapThrowing <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token class-name">TodoAPIModel</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// 返回 TodoAPIModel 模型</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="3"><li>测试</li></ol><p>通过 curl 测试：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -H <span class="token string">&quot;Content-Type: application/json&quot;</span> -d <span class="token string">&#39;{&quot;title&quot;: &quot;learn vapor&quot;, &quot;order&quot;: 3}&#39;</span> -X POST <span class="token string">&quot;http://127.0.0.1:8080/todos&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过测试代码：</p><p>在 <code>AppTest.swift</code> 文件内添加测试代码</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">testCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">.</span>testing<span class="token punctuation">)</span>\n    <span class="token keyword">defer</span> <span class="token punctuation">{</span> app<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token keyword">try</span> <span class="token function">configure</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n\n    <span class="token keyword">let</span> todoModel <span class="token operator">=</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;learn vapor&quot;</span></span><span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token keyword">try</span> app<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span><span class="token punctuation">,</span> beforeRequest<span class="token punctuation">:</span> <span class="token punctuation">{</span> req <span class="token keyword">in</span>\n        <span class="token keyword">try</span> req<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>todoModel<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> afterResponse<span class="token punctuation">:</span> <span class="token punctuation">{</span> res <span class="token keyword">in</span>\n        <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token punctuation">.</span>ok<span class="token punctuation">)</span>\n        <span class="token keyword">let</span> model <span class="token operator">=</span> <span class="token keyword">try</span> res<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">TodoAPIModel</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;\\n</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">model</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">\\n&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="update" tabindex="-1"><a class="header-anchor" href="#update" aria-hidden="true">#</a> Update</h5><ol><li>创建模型</li></ol><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">struct</span> <span class="token class-name">UpdateRequestBody</span><span class="token punctuation">:</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span>\n    <span class="token keyword">let</span> completed<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token operator">?</span>\n    <span class="token keyword">let</span> order<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>在 <code>TodoController.swift</code> 文件内编写API</li></ol><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span>routes<span class="token punctuation">:</span> <span class="token class-name">RoutesBuilder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n  \t<span class="token comment">// 请求进行分组  </span>\n  \t<span class="token keyword">let</span> todos <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">grouped</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span><span class="token punctuation">)</span>\n    todos<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>use<span class="token punctuation">:</span> create<span class="token punctuation">)</span>\n    todos<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;:todoID&quot;</span></span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> update<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">EventLoopFuture</span><span class="token operator">&lt;</span><span class="token class-name">TodoAPIModel</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 查找 url 内制定 todo</span>\n  \t<span class="token keyword">guard</span> <span class="token keyword">let</span> todoIDString <span class="token operator">=</span> req<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;todoID&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token keyword">let</span> todoID <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span>todoIDString<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token class-name">Abort</span><span class="token punctuation">(</span><span class="token punctuation">.</span>badRequest<span class="token punctuation">,</span> reason<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Invalid parameter `todoID`&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\t\t\n  \t<span class="token comment">// 请求参数转模型</span>\n    <span class="token keyword">let</span> requestBody <span class="token operator">=</span> <span class="token keyword">try</span> req<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">UpdateRequestBody</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token class-name">Todo</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>todoID<span class="token punctuation">,</span> on<span class="token punctuation">:</span> req<span class="token punctuation">.</span>db<span class="token punctuation">)</span> <span class="token comment">// 根据id在数据库中查找数据</span>\n        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>or<span class="token punctuation">:</span> <span class="token class-name">Abort</span><span class="token punctuation">(</span><span class="token punctuation">.</span>notFound<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// 未找到，直接返回</span>\n        <span class="token punctuation">.</span>flatMap <span class="token punctuation">{</span> todo <span class="token keyword">in</span>  <span class="token comment">// todo 代表已经查找到的对象</span>\n            <span class="token comment">// 更新已经查找到的 todo 对象的数据</span>\n            <span class="token keyword">if</span> <span class="token keyword">let</span> title <span class="token operator">=</span> requestBody<span class="token punctuation">.</span>title <span class="token punctuation">{</span>\n                todo<span class="token punctuation">.</span>title <span class="token operator">=</span> title\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token keyword">let</span> completed <span class="token operator">=</span> requestBody<span class="token punctuation">.</span>completed <span class="token punctuation">{</span>\n                todo<span class="token punctuation">.</span>completed <span class="token operator">=</span> completed\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token keyword">let</span> order <span class="token operator">=</span> requestBody<span class="token punctuation">.</span>order <span class="token punctuation">{</span>\n                todo<span class="token punctuation">.</span>order <span class="token operator">=</span> order\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 存入数据库</span>\n            <span class="token keyword">return</span> todo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> req<span class="token punctuation">.</span>db<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> todo<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token punctuation">.</span>flatMapThrowing <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token class-name">TodoAPIModel</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// 把已经修改好的 todo 对象，转成 TodoAPIModel 模型</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><ol start="3"><li>测试</li></ol><p>通过 curl 测试：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">&quot;http://127.0.0.1:8080/todos/056A865C-293D-455A-BCAB-5E8B375F9952&quot;</span>\n<span class="token function">curl</span> -H <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span>\n\t-d <span class="token string">&#39;{&quot;title&quot;: &quot;learn vapor this year&quot;, &quot;completed&quot;: true, &quot;order&quot;: 0}&#39;</span><span class="token punctuation">\\</span>\n\t-X PATCH <span class="token string">&quot;<span class="token variable">${url}</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过测试代码：</p><p>在 <code>AppTest.swift</code> 文件内添加测试代码</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">testCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">.</span>testing<span class="token punctuation">)</span>\n    <span class="token keyword">defer</span> <span class="token punctuation">{</span> app<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token keyword">try</span> <span class="token function">configure</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n\n    <span class="token keyword">let</span> todoID <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;056A865C-293D-455A-BCAB-5E8B375F9952&quot;</span></span>\n    <span class="token keyword">let</span> todoModel <span class="token operator">=</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;learn vapor this year&quot;</span></span><span class="token punctuation">,</span> completed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> order<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">try</span> app<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">PATCH</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;todos/</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">todoID</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> beforeRequest<span class="token punctuation">:</span> <span class="token punctuation">{</span> req <span class="token keyword">in</span>\n        <span class="token keyword">try</span> req<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>todoModel<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> afterResponse<span class="token punctuation">:</span> <span class="token punctuation">{</span> res <span class="token keyword">in</span>\n        <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token punctuation">.</span>ok<span class="token punctuation">)</span>\n        <span class="token keyword">let</span> model <span class="token operator">=</span> <span class="token keyword">try</span> res<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">TodoAPIModel</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h5 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> Get</h5><p>获取所有的 todo 列表</p><ol><li>在 <code>TodoController.swift</code> 文件内编写API</li></ol><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span>routes<span class="token punctuation">:</span> <span class="token class-name">RoutesBuilder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n  \t<span class="token comment">// 请求进行分组  </span>\n  \t<span class="token keyword">let</span> todos <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">grouped</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span><span class="token punctuation">)</span>\n    todos<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>use<span class="token punctuation">:</span> create<span class="token punctuation">)</span>\n    todos<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;:todoID&quot;</span></span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> update<span class="token punctuation">)</span>\n  \t\n  \ttodos<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>use<span class="token punctuation">:</span> index<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">EventLoopFuture</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token class-name">TodoAPIModel</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Todo</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> req<span class="token punctuation">.</span>db<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查找所有数据</span>\n        <span class="token punctuation">.</span>flatMapThrowing <span class="token punctuation">{</span> todos <span class="token keyword">in</span>\n            <span class="token comment">// convert `todos` to `[TodoAPIModel]</span>\n            <span class="token keyword">try</span> todos<span class="token punctuation">.</span>map <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token class-name">TodoAPIModel</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="2"><li>测试</li></ol><p>通过 curl 测试：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">&quot;http://127.0.0.1:8080/todos/&quot;</span>\n<span class="token function">curl</span> <span class="token string">&quot;<span class="token variable">${url}</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过测试代码：</p><p>在 <code>AppTest.swift</code> 文件内添加测试代码</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">convertStringToArray</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">Any</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token keyword">do</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> data <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token operator">!</span>\n        <span class="token keyword">if</span> <span class="token keyword">let</span> jsonArray <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONSerialization</span><span class="token punctuation">.</span><span class="token function">jsonObject</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> data<span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">.</span>allowFragments<span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token punctuation">[</span><span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">Any</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> jsonArray\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function-definition function">testGetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">.</span>testing<span class="token punctuation">)</span>\n    <span class="token keyword">defer</span> <span class="token punctuation">{</span> app<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token keyword">try</span> <span class="token function">configure</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n\n    <span class="token keyword">try</span> app<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span><span class="token punctuation">,</span> afterResponse<span class="token punctuation">:</span> <span class="token punctuation">{</span> res <span class="token keyword">in</span>\n        <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token punctuation">.</span>ok<span class="token punctuation">)</span>\n\n        <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token function">convertStringToArray</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">.</span>string<span class="token punctuation">)</span>\n        <span class="token keyword">for</span> element <span class="token keyword">in</span> array <span class="token punctuation">{</span>\n            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;\\n</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">element</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;\\nend\\n&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h5 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> Delete</h5><p>根据 id 删除某一个todo列表</p><ol><li>在 <code>TodoController.swift</code> 文件内编写API</li></ol><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span>routes<span class="token punctuation">:</span> <span class="token class-name">RoutesBuilder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n  \t<span class="token comment">// 请求进行分组  </span>\n  \t<span class="token keyword">let</span> todos <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">grouped</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;todos&quot;</span></span><span class="token punctuation">)</span>\n    todos<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>use<span class="token punctuation">:</span> create<span class="token punctuation">)</span>\n    todos<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;:todoID&quot;</span></span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> update<span class="token punctuation">)</span>\n  \ttodos<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>use<span class="token punctuation">:</span> index<span class="token punctuation">)</span>\n  \t\n  \ttodos<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;:todoID&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> todo <span class="token keyword">in</span>\n        todo<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>use<span class="token punctuation">:</span> delete<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function-definition function">delete</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">EventLoopFuture</span><span class="token operator">&lt;</span><span class="token class-name">HTTPStatus</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Todo</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>parameters<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;todoID&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token punctuation">:</span> req<span class="token punctuation">.</span>db<span class="token punctuation">)</span> <span class="token comment">// 数据库根据 todoID 查找</span>\n        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>or<span class="token punctuation">:</span> <span class="token class-name">Abort</span><span class="token punctuation">(</span><span class="token punctuation">.</span>notFound<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 未找到：直接返回</span>\n        <span class="token punctuation">.</span>flatMap <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> req<span class="token punctuation">.</span>db<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// 找到： 从数据库删除</span>\n        <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token punctuation">.</span>ok<span class="token punctuation">)</span>  <span class="token comment">// 返回成功的状态码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ol start="2"><li>测试</li></ol><p>通过 curl 测试：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">&quot;http://127.0.0.1:8080/todos/056A865C-293D-455A-BCAB-5E8B375F9952&quot;</span>\n<span class="token function">curl</span> -X DELETE <span class="token string">&quot;<span class="token variable">${url}</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过测试代码：</p><p>在 <code>AppTest.swift</code> 文件内添加测试代码</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">.</span>testing<span class="token punctuation">)</span>\n    <span class="token keyword">defer</span> <span class="token punctuation">{</span> app<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token keyword">try</span> <span class="token function">configure</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>\n\n    <span class="token keyword">let</span> todoID <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;056A865C-293D-455A-BCAB-5E8B375F9952&quot;</span></span>\n    <span class="token keyword">try</span> app<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;todos/</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">todoID</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> afterResponse<span class="token punctuation">:</span> <span class="token punctuation">{</span> res <span class="token keyword">in</span>\n        <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token punctuation">.</span>ok<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="查看所有的api接口" tabindex="-1"><a class="header-anchor" href="#查看所有的api接口" aria-hidden="true">#</a> 查看所有的API接口</h5><ol><li>在 <code>Scheme</code> 选项中，点击 <code>Edit Scheme</code>， 选中 <code>Run</code> -&gt; <code>Arguments</code> ，在 <code>Arguments Passed On Launch</code> 中添加 <code>routes</code> 字段，运行程序，在控制台会显示所有的API接口</li><li>在终端上进入项目目录下，执行命令：<code>swift run Run routes</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>+--------+----------------+\n<span class="token operator">|</span> GET    <span class="token operator">|</span> /              <span class="token operator">|</span>\n+--------+----------------+\n<span class="token operator">|</span> GET    <span class="token operator">|</span> /hello         <span class="token operator">|</span>\n+--------+----------------+\n<span class="token operator">|</span> GET    <span class="token operator">|</span> /todos         <span class="token operator">|</span>\n+--------+----------------+\n<span class="token operator">|</span> GET    <span class="token operator">|</span> /todos/:todoID <span class="token operator">|</span>\n+--------+----------------+\n<span class="token operator">|</span> POST   <span class="token operator">|</span> /todos         <span class="token operator">|</span>\n+--------+----------------+\n<span class="token operator">|</span> DELETE <span class="token operator">|</span> /todos/:todoID <span class="token operator">|</span>\n+--------+----------------+\n<span class="token operator">|</span> PATCH  <span class="token operator">|</span> /todos/:todoID <span class="token operator">|</span>\n+--------+----------------+\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h4>',87),e={href:"https://docs.vapor.codes/4.0/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("Vapor Docs"),c={href:"https://betterprogramming.pub/vapor-4-todo-backend-5035c9d7e295",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("How to Build a To-Do List Back End With Vapor 4 and Swift"),u={href:"https://www.raywenderlich.com/16909142-testing-in-vapor-4",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("Testing in Vapor 4"),r={},k=(0,a(3744).Z)(r,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",c,[l,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",u,[i,(0,p.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);