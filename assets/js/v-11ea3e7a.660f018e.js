"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3153],{1061:(a,n,e)=>{e.r(n),e.d(n,{data:()=>s});const s={key:"v-11ea3e7a",path:"/shell/sort.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"shell/sort.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},3:(a,n,e)=>{e.r(n),e.d(n,{default:()=>o});const s=(0,e(6252).uE)('<p align="right">Update: 2020-12-21</p><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h4><blockquote><p>The <strong>sort</strong> utility sorts text and binary files by lines.</p><p>A line is a record separated from the subsequent record by a newline (default) or NUL &#39;\\0&#39; character (-z option).</p></blockquote><h4 id="常见用法" tabindex="-1"><a class="header-anchor" href="#常见用法" aria-hidden="true">#</a> 常见用法</h4><h5 id="_1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-基本用法" aria-hidden="true">#</a> 1. 基本用法</h5><p>将文件的每一行做为一个单位，按照ASCII 码值进行比较， 最后升序输出。</p><blockquote><p>sort [file-path]</p></blockquote><h5 id="_2-u-参数" tabindex="-1"><a class="header-anchor" href="#_2-u-参数" aria-hidden="true">#</a> 2. <code>-u</code> 参数</h5><p>去除文件中重复的行</p><blockquote><p>sort -u [file-path]</p></blockquote><h5 id="_3-r-参数" tabindex="-1"><a class="header-anchor" href="#_3-r-参数" aria-hidden="true">#</a> 3. <code>-r</code> 参数</h5><p>降序输出</p><blockquote><p>sort -r [file-path]</p></blockquote><h5 id="_4-n-参数" tabindex="-1"><a class="header-anchor" href="#_4-n-参数" aria-hidden="true">#</a> 4. <code>-n</code> 参数</h5><p>按照 <strong>数值大小</strong> 来排序</p><blockquote><p>sort -n [file-path]</p></blockquote><h5 id="_5-t-和-k-参数" tabindex="-1"><a class="header-anchor" href="#_5-t-和-k-参数" aria-hidden="true">#</a> 5. <code>-t</code> 和 <code>-k</code> 参数</h5><p><code>-t</code> 用于指定分隔符， <code>-k</code> 用于指定排序的列</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 以 : 为分隔符， 用 第2列 的值，按照 数值大小 来升序排列</span>\n<span class="token function">sort</span> -n -k <span class="token number">2</span> -t <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>file-path<span class="token punctuation">]</span>\n\n<span class="token comment"># 以 空格 为分隔符， 第2列的值按照数值大小降序排列， 如果第二列的值相同，则用第3列的值按照数值大小升序排列</span>\n<span class="token function">sort</span> -t <span class="token string">&#39; &#39;</span>  -k 2nr -k 3n <span class="token punctuation">[</span>file-path<span class="token punctuation">]</span>\n\n<span class="token comment"># 以 空格 为分隔符, 按照第1列的第2个字符升序排列</span>\n<span class="token function">sort</span> -t <span class="token string">&#39; &#39;</span> -k <span class="token number">1.2</span> <span class="token punctuation">[</span>file-path<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',19),t={},o=(0,e(3744).Z)(t,[["render",function(a,n){return s}]])},3744:(a,n)=>{n.Z=(a,n)=>{for(const[e,s]of n)a[e]=s;return a}}}]);