"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4927],{4763:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s={key:"v-5b162b2a",path:"/shell/crontab.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"shell/crontab.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},5886:(e,a,n)=>{n.r(a),n.d(a,{default:()=>l});const s=(0,n(6252).uE)('<p align="right">2019-7-17</p><h4 id="crontab-执行定时任务" tabindex="-1"><a class="header-anchor" href="#crontab-执行定时任务" aria-hidden="true">#</a> crontab 执行定时任务</h4><p>使用于Mac电脑。</p><h5 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h5><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">crontab</span> <span class="token punctuation">[</span>-u user<span class="token punctuation">]</span> <span class="token function">file</span>\n<span class="token function">crontab</span> <span class="token punctuation">[</span>-u user<span class="token punctuation">]</span> <span class="token punctuation">{</span> -l <span class="token operator">|</span> -r <span class="token operator">|</span> -e <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>参数说明:</p><ul><li><code>-l</code> 列举当前的定时任务</li><li><code>-r</code> 删除当前的定时任务</li><li><code>-e</code> 编辑定时任务</li></ul><h5 id="crontab-文件格式" tabindex="-1"><a class="header-anchor" href="#crontab-文件格式" aria-hidden="true">#</a> crontab 文件格式</h5><ul><li>第一列分钟 0 ~ 59</li><li>第二列小时 0 ~ 23 (0 表示子夜)</li><li>第三列日 1 ~ 31</li><li>第四列月 1 ~ 12</li><li>第五列星期 0 ~ 7 (0和7表示星期天)</li><li>第六列 需要执行的命令</li></ul><h5 id="时间格式说明" tabindex="-1"><a class="header-anchor" href="#时间格式说明" aria-hidden="true">#</a> 时间格式说明</h5><ul><li><code>*</code> 在第一列表示每分钟， 在第二列表示每小时，其他依次类推；</li><li><code>a-b</code> 在第一列表示第a 到 b 分钟，在第二列表示 a 到 b 小时，其他依次类推；</li><li><code>*/n</code> 在第一列表示每n分钟执行一次， 在第二列表示每n小时执行一次，其他依次类推；</li><li><code>a, b, c</code> 在第一列时，表示每在第 a，b，c分钟执行一次，在第二列表示每a， b，c小时执行一次，其他依次类推；</li></ul><h5 id="使用实例" tabindex="-1"><a class="header-anchor" href="#使用实例" aria-hidden="true">#</a> 使用实例</h5><p>每分钟定时执行 <code>/User/peak/Desktop/test.sh</code> 脚本。</p><ol><li><p><code>crontab -e</code> 进入定时任务编辑界面</p></li><li><p><code>* * * * * /bin/sh /User/peak/Desktop/test.sh</code></p></li></ol><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h5><ol><li>待执行的脚本如果需要处理路径问题，需要使用绝对路径，判断当前脚本位置，可以使用如下代码：</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>dir=&quot;$(cd $(dirname ${BASH_SOURCE[0]});  pwd)&quot;\necho $dir\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>解释说明:</p><p><code>BASH_SOURCE[0]</code> 等价与 <code>BASH_SOURCE</code>, 取得当前执行的 shell 文件的文件名。</p><p><code>dirname</code> 取得当前执行的脚本的父目录。</p><p><code>cd $(dirname ${BASH_SOURCE[0]})</code> 进入这个目录(切换当前工作目录)。</p><p><code>pwd</code> 显示当前工作目录( cd 执行后的)</p><ol start="2"><li>执行后，系统会寄一封信给你，显示该程序执行的内容。</li></ol>',23),c={},l=(0,n(3744).Z)(c,[["render",function(e,a){return s}]])},3744:(e,a)=>{a.Z=(e,a)=>{for(const[n,s]of a)e[n]=s;return e}}}]);