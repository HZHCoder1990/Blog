"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7085],{4915:(n,e,l)=>{l.r(e),l.d(e,{data:()=>a});const a={key:"v-c181054c",path:"/others/git.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"others/git.md",git:{updatedTime:1633949964e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},4968:(n,e,l)=>{l.r(e),l.d(e,{default:()=>In});var a=l(6252),s=l(7562);const t=(0,a._)("h4",{id:"目录",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),(0,a.Uk)(" 目录")],-1),r=(0,a._)("p",null,[(0,a._)("a",{href:"#git-concept"},"Git基本概念")],-1),i=(0,a._)("p",null,[(0,a._)("a",{href:"#common-command"},"常见命令")],-1),c=(0,a._)("p",null,[(0,a._)("a",{href:"#version-back"},"版本回退")],-1),_=(0,a._)("p",null,[(0,a._)("a",{href:"#undo-file-change"},"撤销文件的修改")],-1),u=(0,a._)("p",null,[(0,a._)("a",{href:"#branch"},"分支")],-1),o=(0,a._)("p",null,[(0,a._)("a",{href:"#resolved-conflict"},"解决冲突")],-1),d=(0,a._)("p",null,[(0,a._)("a",{href:"#submodule"},"子模块")],-1),p=(0,a._)("p",null,[(0,a._)("a",{href:"#generate-publick-key"},"生成 SSH 公钥")],-1),b=(0,a._)("p",null,[(0,a._)("a",{href:"#tag"},"标签")],-1),m=(0,a._)("p",null,[(0,a._)("a",{href:"#ignore"},"忽略文件/文件夹")],-1),k=(0,a._)("h4",{id:"git基本概念",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#git基本概念","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"git-concept"}),(0,a.Uk)("Git基本概念")],-1),h=(0,a._)("ul",null,[(0,a._)("li",null,"工作区(Working Directory)")],-1),g=(0,a._)("blockquote",null,[(0,a._)("p",null,"在电脑里面能够看到的目录")],-1),U=(0,a._)("ul",null,[(0,a._)("li",null,"版本库（Repository）")],-1),f=(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a.Uk)("工作区又一个隐藏文件夹"),(0,a._)("code",null,".git"),(0,a.Uk)(", 叫做Git的版本库。"),(0,a._)("br"),(0,a.Uk)(" Git的版本库存放很多东西， 其中比价重要的就是stage（或者index) 的暂存区， 还有Git为我们自动创建的第一个分支"),(0,a._)("code",null,"master"),(0,a.Uk)("， 以及指向"),(0,a._)("code",null,"master"),(0,a.Uk)("的指针"),(0,a._)("code",null,"HEAD"),(0,a.Uk)("。")])],-1),x=(0,a._)("p",null,[(0,a._)("img",{src:s,alt:"index"})],-1),v=(0,a._)("ul",null,[(0,a._)("li",null,"远程仓库区(Remote)")],-1),E=(0,a._)("blockquote",null,[(0,a._)("p",null,"代码托管的服务器")],-1),A=(0,a._)("h4",{id:"常见命令",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#常见命令","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"common-command"}),(0,a.Uk)("常见命令")],-1),D=(0,a.uE)("<li><p><code>git clone &lt;remote-url&gt;</code> 克隆某个远端仓库</p></li><li><p><code>git add &lt;file path&gt;</code> 把工作区中修改的文件添加到暂存区</p></li><li><p><code>git commit -m &#39;xx&#39;</code> 把暂存区中的内容提交到当前分支</p></li><li><p><code>git pull</code> 拉取远端代码，并自动合并</p></li><li><p><code>git push origin master</code> 当前分支(默认是<code>master</code>分支)代码推送到远端仓库</p></li><li><p><code>git push origin local_branch_name:local_branch_name</code> 把本地的 <code>local_branch_name</code> 分支推送到远端的 <code>local_branch_name</code> 分支， 远端没有 <code>local_branch_name</code> 会自动创建</p></li>",6),w=(0,a._)("code",null,"git rebase",-1),H=(0,a.Uk)(),G={href:"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA",target:"_blank",rel:"noopener noreferrer"},q=(0,a.Uk)("变基操作"),y=(0,a.uE)('<p>作用：把本地未 push 的分叉提交历史整理成直线；</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>把 experiment 分支合并到 master 分支上使用rebase操作流程:\n<span class="token number">1</span>. <span class="token function">git</span> checkout experiment\n<span class="token number">2</span>. <span class="token function">git</span> rebase master\n<span class="token number">3</span>. <span class="token function">git</span> checkout master\n<span class="token number">4</span>. <span class="token function">git</span> merge experiment\n\n<span class="token comment"># 发生冲突之后，解决完毕后,不再使用 git commit 命令，而是继续执行 rebase 操作</span>\n<span class="token function">git</span> rebase --continue \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',2),S=(0,a._)("h4",{id:"版本回退",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#版本回退","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"version-back"}),(0,a.Uk)("版本回退")],-1),O=(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("code",null,"git reset --hard HEAD^"),(0,a.Uk)(" 把当前分支指向上一个版本，")]),(0,a._)("li",null,[(0,a._)("code",null,"git reset --hard HEAD~100"),(0,a.Uk)(", 把当前分支回退往上100个版本，")]),(0,a._)("li",null,[(0,a._)("code",null,"git reset --hard xxxx"),(0,a.Uk)(", 把当前分支指到指定版本")])],-1),C=(0,a._)("p",null,[(0,a._)("code",null,"git rest"),(0,a.Uk)(" 的原理是: 让最新提交的指针回到以前某个时点，该时点之后的提交都从历史中消失。")],-1),W=(0,a._)("p",null,[(0,a.Uk)("默认情况下, "),(0,a._)("code",null,"git reset"),(0,a.Uk)(" 不改变工作区的文件(但会改变暂存区)， "),(0,a._)("code",null,"--hard"),(0,a.Uk)(" 参数可以让工作区的文件也回到以前的状态。")],-1),F=(0,a._)("p",null,[(0,a.Uk)("另一种常见场景是，提交代码之后，突然意识到这个提交有问题，应该撤销掉， 需要执行 "),(0,a._)("code",null,"git revert HEAD"),(0,a.Uk)(" .")],-1),T=(0,a._)("p",null,"上面代码原理是: 在当前提交后面，新增一次提交，抵消掉上一次提交导致的所有变化。它不会改变过去的历史，所以是首选方式，没有任何丢失代码的风险。",-1),z=(0,a._)("p",null,[(0,a._)("code",null,"git revert"),(0,a.Uk)(" 命令还有两个参数: - "),(0,a._)("code",null,"--no-edit"),(0,a.Uk)(" 执行时不打开默认编辑器，直接使用 Git 自动生成的提交信息。 - "),(0,a._)("code",null,"--no-commit"),(0,a.Uk)(" 只抵消暂存区和工作区的文件变化，不产生新的提交。")],-1),R=(0,a._)("p",null,[(0,a.Uk)("替换上一次提交， 使用 "),(0,a._)("code",null,'git commit --amend -m "A new commit."'),(0,a.Uk)(" 来修改上一次提交的信息。")],-1),j=(0,a._)("h4",{id:"撤销文件的修改",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#撤销文件的修改","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"undo-file-change"}),(0,a.Uk)("撤销文件的修改")],-1),B=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("文件没有添加到暂存区(没有使用"),(0,a._)("code",null,"git add "),(0,a.Uk)(")")]),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("code",null,"git checkout -- <file path>"),(0,a.Uk)(" 把文件在工作区的修改全部撤销，这里有两种情况： "),(0,a._)("ul",null,[(0,a._)("li",null,"一种是自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；"),(0,a._)("li",null,"一种是已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。")])])])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("文件已经添加到暂存区(使用"),(0,a._)("code",null,"git add "),(0,a.Uk)("， 尚未使用"),(0,a._)("code",null,"git commit"),(0,a.Uk)(")")]),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("code",null,"git reset HEAD <file>"),(0,a.Uk)(" 把暂存区的修改撤销掉（"),(0,a._)("code",null,"unstage"),(0,a.Uk)("），重新放回工作区")]),(0,a._)("li",null,[(0,a._)("code",null,"git checkout -- <file path>"),(0,a.Uk)(" 撤销工作区中文件的修改")])])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("暂存区内容已经提交到当前分支(使用"),(0,a._)("code",null,"git commit"),(0,a.Uk)(")")]),(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("code",null,"git reset HEAD^"),(0,a.Uk)(" 回退当前提交到工作区")]),(0,a._)("li",null,[(0,a._)("code",null,"git checkout -- <file path>"),(0,a.Uk)(" 撤销工作区中文件的修改")])])])],-1),N=(0,a._)("h4",{id:"分支",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#分支","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"branch"}),(0,a.Uk)("分支")],-1),Z=(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("查看本地分支: "),(0,a._)("code",null,"git branch")])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("查看所有分支: "),(0,a._)("code",null,"git branch -a")])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("创建分支: "),(0,a._)("code",null,"git branch <name>")])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("切换分支: "),(0,a._)("code",null,"git checkout <name>")])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("创建+切换分支: "),(0,a._)("code",null,"git checkout -b <name>")])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("合并某分支到当前分支: "),(0,a._)("code",null,"git merge <name>")])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("删除分支: "),(0,a._)("code",null,"git branch -d <name>")])]),(0,a._)("li",null,[(0,a._)("p",null,[(0,a.Uk)("删除远程分支: "),(0,a._)("code",null,"git push origin --delete <branchName>")])]),(0,a._)("li",null,[(0,a._)("p",null,"当前分支修改内容保留到其他分支"),(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token comment"},"# 暂存当前分支修改内容"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" stash\n\n"),(0,a._)("span",{class:"token comment"},"# 切换到其他分支"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" checkout "),(0,a._)("span",{class:"token operator"},"<"),(0,a.Uk)("branch-name"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)("\n\n"),(0,a._)("span",{class:"token comment"},"# 拉取最新代码"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" pull\n\n"),(0,a._)("span",{class:"token comment"},"# 暂存内容同步到新分支"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" stash pop\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br")])])])],-1),$=(0,a._)("h4",{id:"解决冲突",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#解决冲突","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"resolved-conflict"}),(0,a.Uk)("解决冲突")],-1),L=(0,a._)("p",null,[(0,a._)("code",null,"Git"),(0,a.Uk)(" 用"),(0,a._)("code",null,"<<<<<<<"),(0,a.Uk)("，"),(0,a._)("code",null,"======="),(0,a.Uk)("，"),(0,a._)("code",null,">>>>>>>"),(0,a.Uk)("标记出冲突的内容， 手动解决之后，先"),(0,a._)("code",null,"git add "),(0,a.Uk)(", 再"),(0,a._)("code",null,"git commit"),(0,a.Uk)("即可。")],-1),M=(0,a._)("h4",{id:"子模块",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#子模块","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"submodule"}),(0,a.Uk)("子模块")],-1),P=(0,a._)("p",null,"克隆带子模块的项目",-1),Y=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" clone "),(0,a._)("span",{class:"token operator"},"<"),(0,a.Uk)("url"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),I=(0,a._)("p",null,[(0,a.Uk)("默认会包含子模块目录，但是其中没有任何文件。"),(0,a._)("br"),(0,a.Uk)(" 你必须运行两个命令："),(0,a._)("br")],-1),J=(0,a._)("p",null,[(0,a._)("code",null,"git submodule init"),(0,a.Uk)(" 用来初始化本地配置文件，而 "),(0,a._)("code",null,"git submodule update"),(0,a.Uk)(" 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。")],-1),K=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" clone --recursive "),(0,a._)("span",{class:"token operator"},"<"),(0,a.Uk)("url"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),Q=(0,a._)("p",null,"自动初始化并更新仓库中的每一个子模块。",-1),V=(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a.Uk)("git submodule add "),(0,a._)("code",null,"<url>"),(0,a.Uk)(),(0,a._)("code",null,"<path>")])],-1),X=(0,a._)("p",null,[(0,a.Uk)("为已经存在的git工程添加子模块，"),(0,a._)("code",null,"<path>"),(0,a.Uk)(" 表示指定子模块的位置，不指定则在根目录下。")],-1),nn=(0,a._)("blockquote",null,[(0,a._)("p",null,"git submodule update --remote")],-1),en=(0,a._)("p",null,"拉取子模块的最新代码，默认是在master分支上拉取。",-1),ln=(0,a._)("h4",{id:"生成git-ssh-公钥",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#生成git-ssh-公钥","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"generate-publick-key"}),(0,a.Uk)("生成git ssh 公钥")],-1),an=(0,a._)("blockquote",null,[(0,a._)("ol",null,[(0,a._)("li",null,"SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录")])],-1),sn=(0,a._)("blockquote",null,[(0,a._)("ol",{start:"2"},[(0,a._)("li",null,"有 .pub 后缀的文件就是公钥，另一个文件则是密钥")])],-1),tn=(0,a._)("blockquote",null,[(0,a._)("ol",{start:"3"},[(0,a._)("li",null,[(0,a.Uk)("假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 "),(0,a._)("code",null,"ssh-keygen"),(0,a.Uk)(" 来创建")])])],-1),rn=(0,a._)("h4",{id:"标签",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#标签","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"tag"}),(0,a.Uk)("标签")],-1),cn=(0,a._)("h6",{id:"列出标签",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#列出标签","aria-hidden":"true"},"#"),(0,a.Uk)(" 列出标签")],-1),_n=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"git tag\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),un=(0,a._)("h6",{id:"创建标签",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#创建标签","aria-hidden":"true"},"#"),(0,a.Uk)(" 创建标签")],-1),on=(0,a._)("p",null,[(0,a.Uk)("Git 使用两种主要类型的标签：轻量标签（"),(0,a._)("code",null,"lightweight"),(0,a.Uk)("）与附注标签（"),(0,a._)("code",null,"annotated"),(0,a.Uk)("）。")],-1),dn=(0,a._)("p",null,"一个轻量标签很像一个不会改变的分支——它只是一个特定提交的引用。使用如下命令:",-1),pn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,'git tag -a <tagname> -m "add annotation"\n')]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),bn=(0,a._)("p",null,"轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。使用如下命令:",-1),mn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"git tag <tagname>\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),kn=(0,a._)("h6",{id:"后期打标签",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#后期打标签","aria-hidden":"true"},"#"),(0,a.Uk)(" 后期打标签")],-1),hn=(0,a._)("ol",null,[(0,a._)("li",null,"查看提交历史:")],-1),gn=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a.Uk)("$ "),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" log --pretty"),(0,a._)("span",{class:"token operator"},"="),(0,a.Uk)("oneline\n15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch "),(0,a._)("span",{class:"token string"},"'experiment'"),(0,a.Uk)("\na6b4c97498bd301d84096da251c98a07c7723e65 beginning "),(0,a._)("span",{class:"token function"},"write"),(0,a.Uk)(" support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br")])],-1),Un=(0,a._)("ol",{start:"2"},[(0,a._)("li",null,"现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。")],-1),fn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"$ git tag -a v1.2 9fceb02\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),xn=(0,a._)("h6",{id:"查看标签内容",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#查看标签内容","aria-hidden":"true"},"#"),(0,a.Uk)(" 查看标签内容")],-1),vn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"git show <tagname>\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),En=(0,a._)("h6",{id:"推送标签",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#推送标签","aria-hidden":"true"},"#"),(0,a.Uk)(" 推送标签")],-1),An=(0,a._)("p",null,[(0,a.Uk)("默认情况下， "),(0,a._)("code",null,"git push"),(0,a.Uk)(" 命令不会推送标签到远程服务器上。使用如下命令显示推送标签:")],-1),Dn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"git push origin [tarname]\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),wn=(0,a._)("p",null,"或一次性推送所有标签",-1),Hn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"git push origin --tags\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),Gn=(0,a._)("h6",{id:"删除本地标签",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#删除本地标签","aria-hidden":"true"},"#"),(0,a.Uk)(" 删除本地标签")],-1),qn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"git tag -d <tagname>\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),yn=(0,a._)("h6",{id:"新建分支然后切回到某个标签",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#新建分支然后切回到某个标签","aria-hidden":"true"},"#"),(0,a.Uk)(" 新建分支然后切回到某个标签")],-1),Sn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"git checkout -b branchname tagname\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br")])],-1),On=(0,a._)("h4",{id:"忽略文件-文件夹",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#忽略文件-文件夹","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"ignore"}),(0,a.Uk)("忽略文件/文件夹")],-1),Cn=(0,a._)("h5",{id:"文件-文件夹尚未被提交",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#文件-文件夹尚未被提交","aria-hidden":"true"},"#"),(0,a.Uk)(" 文件/文件夹尚未被提交")],-1),Wn=(0,a._)("ol",null,[(0,a._)("li",null,[(0,a._)("p",null,"创建 .gitignore 文件"),(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token comment"},"# 忽略 .a 文件"),(0,a.Uk)("\n*.a\n\n"),(0,a._)("span",{class:"token comment"},"# 但否定忽略 lib.a, 尽管已经在前面忽略了 .a 文件"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token operator"},"!"),(0,a.Uk)("lib.a\n\n"),(0,a._)("span",{class:"token comment"},"# 仅在当前目录下忽略 TODO 文件， 但不包括子目录下的 subdir/TODO"),(0,a.Uk)("\n/TODO\n\n"),(0,a._)("span",{class:"token comment"},"# 忽略 build/ 文件夹下的所有文件"),(0,a.Uk)("\nbuild/\n\n"),(0,a._)("span",{class:"token comment"},"# 忽略 doc/notes.txt, 不包括 doc/server/arch.txt"),(0,a.Uk)("\ndoc/*.txt\n\n"),(0,a._)("span",{class:"token comment"},"# 忽略所有的 .pdf 文件 在 doc/ directory 下的"),(0,a.Uk)("\ndoc/**/*.pdf\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br")])])]),(0,a._)("li",null,[(0,a._)("p",null,"编写忽略规则")])],-1),Fn=(0,a._)("h5",{id:"文件-文件夹已经提交",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#文件-文件夹已经提交","aria-hidden":"true"},"#"),(0,a.Uk)(" 文件/文件夹已经提交")],-1),Tn=(0,a._)("ol",null,[(0,a._)("li",null,"从本地缓存内删除")],-1),zn=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token comment"},"# 忽略文件"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(),(0,a._)("span",{class:"token function"},"rm"),(0,a.Uk)(" --cached "),(0,a._)("span",{class:"token operator"},"<"),(0,a.Uk)("file-path"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)("\n\n"),(0,a._)("span",{class:"token comment"},"# 忽略文件夹"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(),(0,a._)("span",{class:"token function"},"rm"),(0,a.Uk)(" -r --cached "),(0,a._)("span",{class:"token operator"},"<"),(0,a.Uk)("folder-path"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)("\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br")])],-1),Rn=(0,a._)("ol",{start:"2"},[(0,a._)("li",null,"在 .gitignore 文件内编写忽略规则"),(0,a._)("li",null,"提交到 git 仓库")],-1),jn=(0,a._)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,a._)("pre",{class:"language-bash"},[(0,a._)("code",null,[(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(),(0,a._)("span",{class:"token function"},"add"),(0,a.Uk)(),(0,a._)("span",{class:"token builtin class-name"},"."),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" commit -m "),(0,a._)("span",{class:"token operator"},"<"),(0,a.Uk)("message"),(0,a._)("span",{class:"token operator"},">"),(0,a.Uk)("\n"),(0,a._)("span",{class:"token function"},"git"),(0,a.Uk)(" push\n")])]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br")])],-1),Bn=(0,a._)("h4",{id:"参考资料",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),(0,a.Uk)(" 参考资料")],-1),Nn={href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"},Zn=(0,a.Uk)("git-book"),$n={href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"},Ln=(0,a.Uk)("git 教程"),Mn={href:"https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5",target:"_blank",rel:"noopener noreferrer"},Pn=(0,a.Uk)("生成 SSH 公钥"),Yn={},In=(0,l(3744).Z)(Yn,[["render",function(n,e){const l=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,r,i,c,_,u,o,d,p,b,m,k,h,g,U,f,x,v,E,A,(0,a._)("ol",null,[D,(0,a._)("li",null,[(0,a._)("p",null,[w,H,(0,a._)("a",G,[q,(0,a.Wm)(l)])]),y])]),S,O,C,W,F,T,z,R,j,B,N,Z,$,L,M,P,Y,I,J,K,Q,V,X,nn,en,ln,an,sn,tn,rn,cn,_n,un,on,dn,pn,bn,mn,kn,hn,gn,Un,fn,xn,vn,En,An,Dn,wn,Hn,Gn,qn,yn,Sn,On,Cn,Wn,Fn,Tn,zn,Rn,jn,Bn,(0,a._)("p",null,[(0,a._)("a",Nn,[Zn,(0,a.Wm)(l)])]),(0,a._)("p",null,[(0,a._)("a",$n,[Ln,(0,a.Wm)(l)])]),(0,a._)("p",null,[(0,a._)("a",Mn,[Pn,(0,a.Wm)(l)])])],64)}]])},3744:(n,e)=>{e.Z=(n,e)=>{for(const[l,a]of e)n[l]=a;return n}},7562:(n,e,l)=>{n.exports=l.p+"assets/img/index.56bfe0f9.jpg"}}]);