"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3433],{8122:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-5725c33e",path:"/data-structure/iOS-Encrypt-Summary.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"iOS常见加密算法总结",slug:"ios常见加密算法总结",children:[]},{level:3,title:"安全散列算法",slug:"安全散列算法",children:[]},{level:3,title:"SHA家族",slug:"sha家族",children:[]},{level:3,title:"HMAC",slug:"hmac",children:[]},{level:3,title:"对称加密",slug:"对称加密",children:[]},{level:3,title:"非对称加密",slug:"非对称加密",children:[]},{level:3,title:"其他",slug:"其他",children:[]}],filePathRelative:"data-structure/iOS-Encrypt-Summary.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},9946:(n,s,e)=>{e.r(s),e.d(s,{default:()=>yn});var a=e(6252);const r=(0,a.uE)('<h3 id="ios常见加密算法总结" tabindex="-1"><a class="header-anchor" href="#ios常见加密算法总结" aria-hidden="true">#</a> iOS常见加密算法总结</h3><h4 id="_1-安全散列算法" tabindex="-1"><a class="header-anchor" href="#_1-安全散列算法" aria-hidden="true">#</a> <a href="#Secure-Hash-Algorithm">1. 安全散列算法</a></h4><blockquote><p><strong>Secure Hash Algorithm</strong>，常见的算法包括了 <strong><a href="#md5">MD5</a></strong>、<strong><a href="#SHA">SHA1</a></strong>、<strong><a href="#HMAC">HMAC</a></strong> 等。</p></blockquote><blockquote><p>将任意长度的二进制值映射为较短的固定长度的二进制值，这个短的二进制值称为哈希值，这个算法具有不可逆、碰撞低等特性。同时该类算法可以用作数字签名，用来证实某个信息确实是由某个人发出的，同时可以保证信息没有被修改。</p></blockquote><blockquote><p>实际上，简单来说，这种算法有两个特性：</p><p>A) 不同的输入一定得出不同的 hash 值；</p><p>B) 无法从 hash 值倒推出原来的输入。</p></blockquote><h4 id="_2-对称加密" tabindex="-1"><a class="header-anchor" href="#_2-对称加密" aria-hidden="true">#</a> <a href="#symmetric-key-encryption">2. 对称加密</a></h4><blockquote><p><strong>symmetric-key encryption</strong>，其中常见的算法包括了 <strong><a href="#AES">AES</a></strong>、<strong><a href="#DES">DES</a></strong>、<strong>3DES</strong>、<strong><a href="#RC4">RC4</a></strong> 等。</p></blockquote><blockquote><p>对称加密指的是可以使用同一个密钥对内容进行加密和解密，相比非对称加密，它的特点是加/解密速度快，并且加密的内容长度几乎没有限制。</p></blockquote><h4 id="_3-非对称加密" tabindex="-1"><a class="header-anchor" href="#_3-非对称加密" aria-hidden="true">#</a> <a href="#asymmetric-public-key-encryption">3. 非对称加密</a></h4><blockquote><p><strong>asymmetric/public-key encryption</strong>，常见的加密算法有 <strong><a href="#RSA">RSA</a></strong>、<strong>DSA</strong>、<strong>ECC</strong> 等。</p></blockquote><blockquote><p>非对称加密有两个密钥，分别为公钥和私钥，其中公钥公开给所有人，私钥永远只能自己知道。</p></blockquote><blockquote><p>使用公钥加密的信息只能使用私钥解密，使用私钥加密只能使用公钥解密。前者用来传输需要保密的信息，因为全世界只有知道对应私钥的人才可以解密；后者用来作数字签名，因为公钥对所有人公开的，可以用来确认这个信息是否是从私钥的拥有者发出的。</p></blockquote><h3 id="安全散列算法" tabindex="-1"><a class="header-anchor" href="#安全散列算法" aria-hidden="true">#</a> <a name="Secure-Hash-Algorithm"></a>安全散列算法</h3><p><strong><a name="md5"></a>MD5信息摘要</strong></p><blockquote><p><strong>MD5 Message-Digest Algorithm</strong>，一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</p><p>MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。</p><p>将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。</p><p>1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#include &lt;CommonCrypto/CommonCrypto.h&gt;\n\n@implementation NSData (Add)\n\n- (NSString *)md5String {\n    unsigned char result[CC_MD5_DIGEST_LENGTH];\n    CC_MD5(self.bytes, (CC_LONG)self.length, result);\n    NSMutableString *hash = [NSMutableString string];\n    for (int i = 0; i &lt; CC_MD5_DIGEST_LENGTH; i++) {\n        [hash appendFormat:@&quot;%02x&quot;, result[i]];\n    }\n    return hash;\n}\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="sha家族" tabindex="-1"><a class="header-anchor" href="#sha家族" aria-hidden="true">#</a> <a name="SHA"></a>SHA家族</h3><blockquote><p><strong>安全散列算法</strong>（英语：Secure Hash Algorithm，缩写为SHA）是一个密码散列函数家族，是FIPS所认证的安全散列算法。 能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的机率很高。 SHA家族的算法，由美国国家安全局（NSA）所设计，并由美国国家标准与技术研究院（NIST）发布，是美国的政府标准，其分别是：</p></blockquote><blockquote><p><strong>SHA-0</strong>：1993年发布，当时称做安全散列标准（Secure Hash Standard），发布之后很快就被NSA撤回，是SHA-1的前身。</p></blockquote><blockquote><p><strong>SHA-1</strong>：1995年发布，SHA-1在许多安全协议中广为使用，包括TLS和SSL、PGP、SSH、S/MIME和IPsec，曾被视为是MD5（更早之前被广为使用的散列函数）的后继者。但SHA-1的安全性在2000年以后已经不被大多数的加密场景所接受。 2017年荷兰密码学研究小组CWI和Google正式宣布攻破了SHA-1。</p></blockquote><blockquote><p><strong>SHA-2</strong>：2001年发布，包括SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。 虽然至今尚未出现对SHA-2有效的攻击，它的算法跟SHA-1基本上仍然相似；因此有些人开始发展其他替代的散列算法。</p></blockquote><blockquote><p><strong>SHA-3</strong>：2015年正式发布，SHA-3并不是要取代SHA-2，因为SHA-2目前并没有出现明显的弱点。 由于对MD5出现成功的破解，以及对SHA-0和SHA-1出现理论上破解的方法，NIST感觉需要一个与之前算法不同的，可替换的加密散列算法，也就是现在的SHA-3。</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#include &lt;CommonCrypto/CommonCrypto.h&gt;\n\n@implementation NSData (Add)\n\n- (NSString *)sha1String {\n    unsigned char result[CC_SHA1_DIGEST_LENGTH];\n    CC_SHA1(self.bytes, (CC_LONG)self.length, result);\n    NSMutableString *hash = [NSMutableString stringWithCapacity:CC_SHA1_DIGEST_LENGTH * 2];\n    for (int i = 0; i &lt; CC_SHA1_DIGEST_LENGTH; i++) {\n        [hash appendFormat:@&quot;%02x&quot;, result[i]];\n    }\n    return hash;\n}\n\n- (NSString *)sha224String {\n    unsigned char result[CC_SHA224_DIGEST_LENGTH];\n    CC_SHA224(self.bytes, (CC_LONG)self.length, result);\n    NSMutableString *hash = [NSMutableString\n                             stringWithCapacity:CC_SHA224_DIGEST_LENGTH * 2];\n    for (int i = 0; i &lt; CC_SHA224_DIGEST_LENGTH; i++) {\n        [hash appendFormat:@&quot;%02x&quot;, result[i]];\n    }\n    return hash;\n}\n\n- (NSString *)sha256String {\n    unsigned char result[CC_SHA256_DIGEST_LENGTH];\n    CC_SHA256(self.bytes, (CC_LONG)self.length, result);\n    NSMutableString *hash = [NSMutableString\n                             stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];\n    for (int i = 0; i &lt; CC_SHA256_DIGEST_LENGTH; i++) {\n        [hash appendFormat:@&quot;%02x&quot;, result[i]];\n    }\n    return hash;\n}\n\n- (NSString *)sha384String {\n    unsigned char result[CC_SHA384_DIGEST_LENGTH];\n    CC_SHA384(self.bytes, (CC_LONG)self.length, result);\n    NSMutableString *hash = [NSMutableString\n                             stringWithCapacity:CC_SHA384_DIGEST_LENGTH * 2];\n    for (int i = 0; i &lt; CC_SHA384_DIGEST_LENGTH; i++) {\n        [hash appendFormat:@&quot;%02x&quot;, result[i]];\n    }\n    return hash;\n}\n\n- (NSString *)sha512String {\n    unsigned char result[CC_SHA512_DIGEST_LENGTH];\n    CC_SHA512(self.bytes, (CC_LONG)self.length, result);\n    NSMutableString *hash = [NSMutableString\n                             stringWithCapacity:CC_SHA512_DIGEST_LENGTH * 2];\n    for (int i = 0; i &lt; CC_SHA512_DIGEST_LENGTH; i++) {\n        [hash appendFormat:@&quot;%02x&quot;, result[i]];\n    }\n    return hash;\n}\n\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h3 id="hmac" tabindex="-1"><a class="header-anchor" href="#hmac" aria-hidden="true">#</a> <a name="HMAC"></a>HMAC</h3><blockquote><p>HMAC加密算法是一种安全的基于加密hash函数和共享密钥的消息认证协议． 它可以有效地防止数据在传输过程中被截获和篡改，维护了数据的完整性、可靠性和安全性. HMAC加密算法是一种基于密钥的报文完整性的验证方法，其安全性是建立在Hash加密算法基础上的</p></blockquote>',25),t={href:"https://en.wikipedia.org/wiki/HMAC",target:"_blank",rel:"noopener noreferrer"},l=(0,a.Uk)("HMAC 维基百科"),i=(0,a.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#include &lt;CommonCrypto/CommonCrypto.h&gt;\n\n@implementation NSData (Add)\n\n\n- (NSString *)hmacStringUsingAlg:(CCHmacAlgorithm)alg withKey:(NSString *)key {\n    size_t size;\n    switch (alg) {\n        case kCCHmacAlgMD5: size = CC_MD5_DIGEST_LENGTH; break;\n        case kCCHmacAlgSHA1: size = CC_SHA1_DIGEST_LENGTH; break;\n        case kCCHmacAlgSHA224: size = CC_SHA224_DIGEST_LENGTH; break;\n        case kCCHmacAlgSHA256: size = CC_SHA256_DIGEST_LENGTH; break;\n        case kCCHmacAlgSHA384: size = CC_SHA384_DIGEST_LENGTH; break;\n        case kCCHmacAlgSHA512: size = CC_SHA512_DIGEST_LENGTH; break;\n        default: return nil;\n    }\n    unsigned char result[size];\n    const char *cKey = [key cStringUsingEncoding:NSUTF8StringEncoding];\n    CCHmac(alg, cKey, strlen(cKey), self.bytes, self.length, result);\n    NSMutableString *hash = [NSMutableString stringWithCapacity:size * 2];\n    for (int i = 0; i &lt; size; i++) {\n        [hash appendFormat:@&quot;%02x&quot;, result[i]];\n    }\n    return hash;\n}\n\n- (NSString *)hmacMD5StringWithKey:(NSString *)key {\n    return [self hmacStringUsingAlg:kCCHmacAlgMD5 withKey:key];\n}\n\n\n- (NSString *)hmacSHA1StringWithKey:(NSString *)key {\n    return [self hmacStringUsingAlg:kCCHmacAlgSHA1 withKey:key];\n}\n\n\n- (NSString *)hmacSHA224StringWithKey:(NSString *)key {\n    return [self hmacStringUsingAlg:kCCHmacAlgSHA224 withKey:key];\n}\n\n\n- (NSString *)hmacSHA256StringWithKey:(NSString *)key {\n    return [self hmacStringUsingAlg:kCCHmacAlgSHA256 withKey:key];\n}\n\n\n- (NSString *)hmacSHA384StringWithKey:(NSString *)key {\n    return [self hmacStringUsingAlg:kCCHmacAlgSHA384 withKey:key];\n}\n\n\n- (NSString *)hmacSHA512StringWithKey:(NSString *)key {\n    return [self hmacStringUsingAlg:kCCHmacAlgSHA512 withKey:key];\n}\n\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h3 id="对称加密" tabindex="-1"><a class="header-anchor" href="#对称加密" aria-hidden="true">#</a> <a name="symmetric-key-encryption"></a>对称加密</h3><h4 id="aes" tabindex="-1"><a class="header-anchor" href="#aes" aria-hidden="true">#</a> <a name="AES"></a>AES</h4><blockquote><p>高级加密标准，在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准.</p></blockquote><p>密码说明</p><blockquote><p>严格地说，<code>AES</code>和<code>Rijndael</code>加密法并不完全一样（虽然在实际应用中两者可以互换），因为<code>Rijndael</code>加密法可以支持更大范围的区块和密钥长度：<code>AES</code>的区块长度固定为128比特，密钥长度则可以是128，192或256比特；而<code>Rijndael</code>使用的密钥和区块长度均可以是128，192或256比特</p></blockquote><p>加/解密NSData：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#include &lt;CommonCrypto/CommonCrypto.h&gt;\n\n@implementation NSData (Add)\n\n- (NSData *)AES256EncryptWithKey:(NSData *)key iv:(NSData *)iv {\n    if (key.length != 16 &amp;&amp; key.length != 24 &amp;&amp; key.length != 32) return nil;\n    if (iv.length != 16 &amp;&amp; iv.length != 0) return nil;\n    \n    NSData *result = nil;\n    size_t bufferSize = self.length + kCCBlockSizeAES128;\n    void *buffer = malloc(bufferSize);\n    if (!buffer) return nil;\n    \n    size_t encryptedSize = 0;\n    CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt,\n                                          kCCAlgorithmAES,\n                                          kCCOptionPKCS7Padding,\n                                          key.bytes,\n                                          key.length,\n                                          iv.bytes,\n                                          self.bytes,\n                                          self.length,\n                                          buffer,\n                                          bufferSize,\n                                          &amp;encryptedSize);\n    if (cryptStatus == kCCSuccess) {\n        result = [[NSData alloc] initWithBytes:buffer length:(NSUInteger)encryptedSize];\n        free(buffer);\n        return result;\n    } else {\n        free(buffer);\n        return nil;\n    }\n}\n\n- (NSData *)AES256DecryptWithKey:(NSData *)key iv:(NSData *)iv {\n    if (key.length != 16 &amp;&amp; key.length != 24 &amp;&amp; key.length != 32) return nil;\n    if (iv.length != 16 &amp;&amp; iv.length != 0) return nil;\n    \n    NSData *result = nil;\n    size_t bufferSize = self.length + kCCBlockSizeAES128;\n    void *buffer = malloc(bufferSize);\n    if (!buffer) return nil;\n    \n    size_t encryptedSize = 0;\n    CCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt,\n                                          kCCAlgorithmAES,\n                                          kCCOptionPKCS7Padding,\n                                          key.bytes,\n                                          key.length,\n                                          iv.bytes,\n                                          self.bytes,\n                                          self.length,\n                                          buffer,\n                                          bufferSize,\n                                          &amp;encryptedSize);\n    if (cryptStatus == kCCSuccess) {\n        result = [[NSData alloc] initWithBytes:buffer length:(NSUInteger)encryptedSize];\n        free(buffer);\n        return result;\n    } else {\n        free(buffer);\n        return nil;\n    }\n}\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>加/解密文件：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n+ (NSString *)AESEncrypt:(NSString *)filePath withKey:(NSString *)key withIv:(NSString *)iv {\n    \n    NSString *content = [[NSString alloc] initWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:nil];\n    \n    NSData *data = [content dataUsingEncoding:NSUTF8StringEncoding];\n    NSData *encryptData = [data AES256EncryptWithKey:[key dataUsingEncoding:NSUTF8StringEncoding] iv:[iv dataUsingEncoding:NSUTF8StringEncoding]];\n    \n    // convert to hex string\n    return [self _hexStringFromData:encryptData];\n}\n\n+ (NSString *)AESDecrypt:(NSString *)filePath withKey:(NSString *)key withIv:(NSString *)iv {\n    \n    NSString *content = [[NSString alloc] initWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:nil];\n    \n    // convert hex string to NSData\n    NSData *data = [self _dataFromHexString:content];\n   \n    NSData *result = [data AES256DecryptWithKey:[key dataUsingEncoding:NSUTF8StringEncoding] iv:[iv dataUsingEncoding:NSUTF8StringEncoding]];\n    \n    return [[NSString alloc] initWithData:result encoding:NSUTF8StringEncoding];\n}\n\n#pragma mark - Private Method\n\n+ (NSString *)_hexStringFromData:(NSData *)data {\n    Byte *bytes = (Byte *)[data bytes];\n    NSMutableString *output = [NSMutableString stringWithCapacity:data.length * 2];\n    for (int i = 0; i &lt; data.length; i++) {\n        [output appendFormat:@&quot;%02x&quot;, bytes[i]];\n    }\n    return output;\n}\n\n+ (NSData *)_dataFromHexString:(NSString *)hexString {\n    \n    NSMutableData *data = [NSMutableData dataWithCapacity:hexString.length/2];\n    unsigned char whole_byte;\n    char byte_chars[3] = {&#39;\\0&#39;,&#39;\\0&#39;,&#39;\\0&#39;};\n    int i;\n    for (i=0; i &lt; [hexString length] / 2; i++) {\n        byte_chars[0] = [hexString characterAtIndex:i*2];\n        byte_chars[1] = [hexString characterAtIndex:i*2+1];\n        whole_byte = strtol(byte_chars, NULL, 16);\n        [data appendBytes:&amp;whole_byte length:1];\n    }\n    \n    return data;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p><strong>参考：</strong></p>',11),p={href:"https://www.zhihu.com/question/20874499",target:"_blank",rel:"noopener noreferrer"},b=(0,a.Uk)("RSA 1024和AES 256，这两种加密算法理论上哪种更安全？"),c={href:"https://www.cnblogs.com/luop/p/4334160.html",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("密码算法详解——AES"),m={href:"https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("高级加密标准"),S={href:"https://stackoverflow.com/questions/7317860/converting-hex-nsstring-to-nsdata",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("converting hex nsstring to nsdata"),g=(0,a._)("h4",{id:"des",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#des","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"DES"}),(0,a.Uk)("DES")],-1),y=(0,a._)("strong",null,"数据加密标准",-1),h=(0,a.Uk)("（英语：Data Encryption Standard，缩写为 DES）是一种"),f={href:"https://zh.wikipedia.org/wiki/%E5%B0%8D%E7%A8%B1%E5%AF%86%E9%91%B0%E5%8A%A0%E5%AF%86",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Uk)("对称密钥加密"),_={href:"https://zh.wikipedia.org/wiki/%E5%A1%8A%E5%AF%86%E7%A2%BC",target:"_blank",rel:"noopener noreferrer"},N=(0,a.Uk)("块密码"),C=(0,a.Uk)("算法，1976年被"),A={href:"https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD",target:"_blank",rel:"noopener noreferrer"},E=(0,a.Uk)("美国"),D=(0,a.Uk)("联邦政府的"),K={href:"https://zh.wikipedia.org/wiki/%E5%9B%BD%E5%AE%B6%E6%A0%87%E5%87%86%E5%B1%80",target:"_blank",rel:"noopener noreferrer"},R=(0,a.Uk)("国家标准局"),v=(0,a.Uk)("确定为"),x={href:"https://zh.wikipedia.org/wiki/%E8%81%94%E9%82%A6%E8%B5%84%E6%96%99%E5%A4%84%E7%90%86%E6%A0%87%E5%87%86",target:"_blank",rel:"noopener noreferrer"},H=(0,a.Uk)("联邦资料处理标准"),q=(0,a.Uk)("（FIPS），随后在国际上广泛流传开来。它基于使用56位密钥的"),w={href:"https://zh.wikipedia.org/w/index.php?title=%E5%AF%86%E9%92%A5%E5%AF%86%E7%A0%81%E5%AD%A6&action=edit&redlink=1",target:"_blank",rel:"noopener noreferrer"},U=(0,a.Uk)("对称算法"),T=(0,a.Uk)("。这个算法因为包含一些"),z={href:"https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%AF%86",target:"_blank",rel:"noopener noreferrer"},O=(0,a.Uk)("机密"),F=(0,a.Uk)("设计元素，相对短的"),W={href:"https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5%E9%95%BF%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"},B=(0,a.Uk)("密钥长度"),I=(0,a.Uk)("以及怀疑内含"),M={href:"https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B%E5%9C%8B%E5%AE%B6%E5%AE%89%E5%85%A8%E5%B1%80",target:"_blank",rel:"noopener noreferrer"},G=(0,a.Uk)("美国国家安全局"),L=(0,a.Uk)("（NSA）的"),P={href:"https://zh.wikipedia.org/wiki/%E5%90%8E%E9%97%A8",target:"_blank",rel:"noopener noreferrer"},j=(0,a.Uk)("后门"),Z=(0,a.Uk)("而在开始时有争议，DES因此受到了强烈的学院派式的审查，并以此推动了现代的"),Y={href:"https://zh.wikipedia.org/wiki/%E5%A1%8A%E5%AF%86%E7%A2%BC",target:"_blank",rel:"noopener noreferrer"},V=(0,a.Uk)("块密码"),X=(0,a.Uk)("及其"),J={href:"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"},Q=(0,a.Uk)("密码分析"),$=(0,a.Uk)("的发展。"),nn=(0,a.uE)('<p>iOS 代码示例</p><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>+ (NSString *)base64EncodedStringWithData:(NSData *)data {\n    return [data base64EncodedStringWithOptions:0];\n}\n\n+ (NSData *)base64DecodedDataWithString:(NSString *)string {\n    return [self base64DecodedDataWithData:[string dataUsingEncoding:NSUTF8StringEncoding]];\n}\n\n+ (NSData *)base64DecodedDataWithData:(NSData *)data {\n    return [[NSData alloc] initWithBase64EncodedData:data options:0];\n}\n\n// DES 加密\n+ (NSString *)DESEncrypt:(NSString *)content withKey:(NSString *)key {\n    NSData *data = [content dataUsingEncoding:NSUTF8StringEncoding];\n    NSData *encryptedData = [self DESCrypt:data withKey:key withIV:nil operation:kCCEncrypt];\n    return [self base64EncodedStringWithData:encryptedData];\n}\n\n// DES 解密\n+ (NSString *)DESDecrypt:(NSString *)content withKey:(NSString *)key {\n    NSData *encryptedData = [self base64DecodedDataWithString:content];\n    NSData *decryptData = [self DESCrypt:encryptedData withKey:key withIV:nil operation:kCCDecrypt];\n    return [[NSString alloc] initWithData:decryptData encoding:NSUTF8StringEncoding];\n}\n\n+ (NSData *)DESCrypt:(NSData *)contentData withKey:(NSString *)key withIV:(NSString *)iv operation:(CCOperation)operation {\n    \n    NSUInteger dataLength = contentData.length;\n    \n    const void *keyBytes = [key dataUsingEncoding:NSUTF8StringEncoding].bytes;\n    const void *ivBytes = [iv dataUsingEncoding:NSUTF8StringEncoding].bytes;\n    const void *contentBytes = contentData.bytes;\n    \n    size_t operationSize = dataLength + kCCBlockSizeDES;\n    void *operationBytes = malloc(operationSize);\n    if (operationBytes == NULL) return nil;\n    \n    size_t actualOutSize = 0;\n    CCCryptorStatus status = CCCrypt(operation, kCCAlgorithmDES, kCCOptionPKCS7Padding | kCCOptionECBMode, keyBytes, kCCKeySizeDES, ivBytes, contentBytes, dataLength, operationBytes, operationSize, &amp;actualOutSize);\n    \n    NSData *outputData = nil;\n    if (status == kCCSuccess) {\n        outputData = [NSData dataWithBytes:operationBytes length:actualOutSize];\n    }\n    \n    free(operationBytes);\n    return outputData;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h4 id="rc4" tabindex="-1"><a class="header-anchor" href="#rc4" aria-hidden="true">#</a> <a name="RC4"></a>RC4</h4><blockquote><p><strong>Rivest Cipher 4</strong>是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#ifndef CX_SWAP // swap two value\n#define CX_SWAP(_a_, _b_) do {__typeof__(_a_) _tmp_ = (_a_); (_a_) = (_b_); (_b_) = (_tmp_); } while(0)\n#endif\n\n@implementation NSString (CX)\n- (NSString *)rc4WithKey:(NSString *)key {\n    int j = 0;\n    unichar res[self.length];\n    const unichar *buffer = res;\n    unsigned char s[256];\n    for (int i = 0; i &lt; 256; i++) {\n        s[i] = i;\n    }\n    for (int i = 0; i &lt; 256; i++) {\n        j = (j + s[i] + [key characterAtIndex:(i%key.length)])%256;\n        CX_SWAP(s[i], s[j]);\n    }\n    int i = j = 0;\n    for (int y = 0; y &lt; self.length; y++) {\n        i = (i + 1) % 256;\n        j = (j + 1) % 256;\n        CX_SWAP(s[i], s[j]);\n        \n        unsigned char f = [self characterAtIndex:y] ^ s[ (s[i] + s[j]) % 256 ];\n        res[y] = f;\n    }\n    return [NSString stringWithCharacters:buffer length:self.length];\n}\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="非对称加密" tabindex="-1"><a class="header-anchor" href="#非对称加密" aria-hidden="true">#</a> <a name="asymmetric-public-key-encryption"></a>非对称加密</h3><h4 id="rsa" tabindex="-1"><a class="header-anchor" href="#rsa" aria-hidden="true">#</a> <a name="RSA"></a>RSA</h4>',7),sn=(0,a._)("strong",null,"以下代码参考自",-1),en=(0,a.Uk)(),an={href:"https://github.com/ideawu/Objective-C-RSA",target:"_blank",rel:"noopener noreferrer"},rn=(0,a.Uk)("Objective-C-RSA"),tn=(0,a.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@interface RSA : NSObject\n\n// return base64 encoded string\n+ (NSString *)encryptString:(NSString *)str publicKey:(NSString *)pubKey;\n// return raw data\n+ (NSData *)encryptData:(NSData *)data publicKey:(NSString *)pubKey;\n// return base64 encoded string\n+ (NSString *)encryptString:(NSString *)str privateKey:(NSString *)privKey;\n// return raw data\n+ (NSData *)encryptData:(NSData *)data privateKey:(NSString *)privKey;\n\n// decrypt base64 encoded string, convert result to string(not base64 encoded)\n+ (NSString *)decryptString:(NSString *)str publicKey:(NSString *)pubKey;\n+ (NSData *)decryptData:(NSData *)data publicKey:(NSString *)pubKey;\n+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey;\n+ (NSData *)decryptData:(NSData *)data privateKey:(NSString *)privKey;\n\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#import &quot;RSA.h&quot;\n#import &lt;Security/Security.h&gt;\n\n@implementation RSA\n\nstatic NSString *base64_encode_data(NSData *data){\n\tdata = [data base64EncodedDataWithOptions:0];\n\tNSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n\treturn ret;\n}\n\nstatic NSData *base64_decode(NSString *str){\n\tNSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n\treturn data;\n}\n\n+ (NSData *)stripPublicKeyHeader:(NSData *)d_key{\n\t// Skip ASN.1 public key header\n\tif (d_key == nil) return(nil);\n\t\n\tunsigned long len = [d_key length];\n\tif (!len) return(nil);\n\t\n\tunsigned char *c_key = (unsigned char *)[d_key bytes];\n\tunsigned int  idx\t = 0;\n\t\n\tif (c_key[idx++] != 0x30) return(nil);\n\t\n\tif (c_key[idx] &gt; 0x80) idx += c_key[idx] - 0x80 + 1;\n\telse idx++;\n\t\n\t// PKCS #1 rsaEncryption szOID_RSA_RSA\n\tstatic unsigned char seqiod[] =\n\t{ 0x30,   0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,\n\t\t0x01, 0x05, 0x00 };\n\tif (memcmp(&amp;c_key[idx], seqiod, 15)) return(nil);\n\t\n\tidx += 15;\n\t\n\tif (c_key[idx++] != 0x03) return(nil);\n\t\n\tif (c_key[idx] &gt; 0x80) idx += c_key[idx] - 0x80 + 1;\n\telse idx++;\n\t\n\tif (c_key[idx++] != &#39;\\0&#39;) return(nil);\n\t\n\t// Now make a new NSData from this buffer\n\treturn([NSData dataWithBytes:&amp;c_key[idx] length:len - idx]);\n}\n\n//credit: http://hg.mozilla.org/services/fx-home/file/tip/Sources/NetworkAndStorage/CryptoUtils.m#l1036\n+ (NSData *)stripPrivateKeyHeader:(NSData *)d_key{\n\t// Skip ASN.1 private key header\n\tif (d_key == nil) return(nil);\n\n\tunsigned long len = [d_key length];\n\tif (!len) return(nil);\n\n\tunsigned char *c_key = (unsigned char *)[d_key bytes];\n\tunsigned int  idx\t = 22; //magic byte at offset 22\n\n\tif (0x04 != c_key[idx++]) return nil;\n\n\t//calculate length of the key\n\tunsigned int c_len = c_key[idx++];\n\tint det = c_len &amp; 0x80;\n\tif (!det) {\n\t\tc_len = c_len &amp; 0x7f;\n\t} else {\n\t\tint byteCount = c_len &amp; 0x7f;\n\t\tif (byteCount + idx &gt; len) {\n\t\t\t//rsa length field longer than buffer\n\t\t\treturn nil;\n\t\t}\n\t\tunsigned int accum = 0;\n\t\tunsigned char *ptr = &amp;c_key[idx];\n\t\tidx += byteCount;\n\t\twhile (byteCount) {\n\t\t\taccum = (accum &lt;&lt; 8) + *ptr;\n\t\t\tptr++;\n\t\t\tbyteCount--;\n\t\t}\n\t\tc_len = accum;\n\t}\n\n\t// Now make a new NSData from this buffer\n\treturn [d_key subdataWithRange:NSMakeRange(idx, c_len)];\n}\n\n+ (SecKeyRef)addPublicKey:(NSString *)key{\n\tNSRange spos = [key rangeOfString:@&quot;-----BEGIN PUBLIC KEY-----&quot;];\n\tNSRange epos = [key rangeOfString:@&quot;-----END PUBLIC KEY-----&quot;];\n\tif(spos.location != NSNotFound &amp;&amp; epos.location != NSNotFound){\n\t\tNSUInteger s = spos.location + spos.length;\n\t\tNSUInteger e = epos.location;\n\t\tNSRange range = NSMakeRange(s, e-s);\n\t\tkey = [key substringWithRange:range];\n\t}\n\tkey = [key stringByReplacingOccurrencesOfString:@&quot;\\r&quot; withString:@&quot;&quot;];\n\tkey = [key stringByReplacingOccurrencesOfString:@&quot;\\n&quot; withString:@&quot;&quot;];\n\tkey = [key stringByReplacingOccurrencesOfString:@&quot;\\t&quot; withString:@&quot;&quot;];\n\tkey = [key stringByReplacingOccurrencesOfString:@&quot; &quot;  withString:@&quot;&quot;];\n\t\n\t// This will be base64 encoded, decode it.\n\tNSData *data = base64_decode(key);\n\tdata = [RSA stripPublicKeyHeader:data];\n\tif(!data){\n\t\treturn nil;\n\t}\n\n\t//a tag to read/write keychain storage\n\tNSString *tag = @&quot;RSAUtil_PubKey&quot;;\n\tNSData *d_tag = [NSData dataWithBytes:[tag UTF8String] length:[tag length]];\n\t\n\t// Delete any old lingering key with the same tag\n\tNSMutableDictionary *publicKey = [[NSMutableDictionary alloc] init];\n\t[publicKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];\n\t[publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\t[publicKey setObject:d_tag forKey:(__bridge id)kSecAttrApplicationTag];\n\tSecItemDelete((__bridge CFDictionaryRef)publicKey);\n\t\n\t// Add persistent version of the key to system keychain\n\t[publicKey setObject:data forKey:(__bridge id)kSecValueData];\n\t[publicKey setObject:(__bridge id) kSecAttrKeyClassPublic forKey:(__bridge id)\n\t kSecAttrKeyClass];\n\t[publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)\n\t kSecReturnPersistentRef];\n\t\n\tCFTypeRef persistKey = nil;\n\tOSStatus status = SecItemAdd((__bridge CFDictionaryRef)publicKey, &amp;persistKey);\n\tif (persistKey != nil){\n\t\tCFRelease(persistKey);\n\t}\n\tif ((status != noErr) &amp;&amp; (status != errSecDuplicateItem)) {\n\t\treturn nil;\n\t}\n\n\t[publicKey removeObjectForKey:(__bridge id)kSecValueData];\n\t[publicKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];\n\t[publicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];\n\t[publicKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\t\n\t// Now fetch the SecKeyRef version of the key\n\tSecKeyRef keyRef = nil;\n\tstatus = SecItemCopyMatching((__bridge CFDictionaryRef)publicKey, (CFTypeRef *)&amp;keyRef);\n\tif(status != noErr){\n\t\treturn nil;\n\t}\n\treturn keyRef;\n}\n\n+ (SecKeyRef)addPrivateKey:(NSString *)key{\n\tNSRange spos;\n\tNSRange epos;\n\tspos = [key rangeOfString:@&quot;-----BEGIN RSA PRIVATE KEY-----&quot;];\n\tif(spos.length &gt; 0){\n\t\tepos = [key rangeOfString:@&quot;-----END RSA PRIVATE KEY-----&quot;];\n\t}else{\n\t\tspos = [key rangeOfString:@&quot;-----BEGIN PRIVATE KEY-----&quot;];\n\t\tepos = [key rangeOfString:@&quot;-----END PRIVATE KEY-----&quot;];\n\t}\n\tif(spos.location != NSNotFound &amp;&amp; epos.location != NSNotFound){\n\t\tNSUInteger s = spos.location + spos.length;\n\t\tNSUInteger e = epos.location;\n\t\tNSRange range = NSMakeRange(s, e-s);\n\t\tkey = [key substringWithRange:range];\n\t}\n\tkey = [key stringByReplacingOccurrencesOfString:@&quot;\\r&quot; withString:@&quot;&quot;];\n\tkey = [key stringByReplacingOccurrencesOfString:@&quot;\\n&quot; withString:@&quot;&quot;];\n\tkey = [key stringByReplacingOccurrencesOfString:@&quot;\\t&quot; withString:@&quot;&quot;];\n\tkey = [key stringByReplacingOccurrencesOfString:@&quot; &quot;  withString:@&quot;&quot;];\n\n\t// This will be base64 encoded, decode it.\n\tNSData *data = base64_decode(key);\n\tdata = [RSA stripPrivateKeyHeader:data];\n\tif(!data){\n\t\treturn nil;\n\t}\n\n\t//a tag to read/write keychain storage\n\tNSString *tag = @&quot;RSAUtil_PrivKey&quot;;\n\tNSData *d_tag = [NSData dataWithBytes:[tag UTF8String] length:[tag length]];\n\n\t// Delete any old lingering key with the same tag\n\tNSMutableDictionary *privateKey = [[NSMutableDictionary alloc] init];\n\t[privateKey setObject:(__bridge id) kSecClassKey forKey:(__bridge id)kSecClass];\n\t[privateKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\t[privateKey setObject:d_tag forKey:(__bridge id)kSecAttrApplicationTag];\n\tSecItemDelete((__bridge CFDictionaryRef)privateKey);\n\n\t// Add persistent version of the key to system keychain\n\t[privateKey setObject:data forKey:(__bridge id)kSecValueData];\n\t[privateKey setObject:(__bridge id) kSecAttrKeyClassPrivate forKey:(__bridge id)\n\t kSecAttrKeyClass];\n\t[privateKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)\n\t kSecReturnPersistentRef];\n\n\tCFTypeRef persistKey = nil;\n\tOSStatus status = SecItemAdd((__bridge CFDictionaryRef)privateKey, &amp;persistKey);\n\tif (persistKey != nil){\n\t\tCFRelease(persistKey);\n\t}\n\tif ((status != noErr) &amp;&amp; (status != errSecDuplicateItem)) {\n\t\treturn nil;\n\t}\n\n\t[privateKey removeObjectForKey:(__bridge id)kSecValueData];\n\t[privateKey removeObjectForKey:(__bridge id)kSecReturnPersistentRef];\n\t[privateKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnRef];\n\t[privateKey setObject:(__bridge id) kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];\n\n\t// Now fetch the SecKeyRef version of the key\n\tSecKeyRef keyRef = nil;\n\tstatus = SecItemCopyMatching((__bridge CFDictionaryRef)privateKey, (CFTypeRef *)&amp;keyRef);\n\tif(status != noErr){\n\t\treturn nil;\n\t}\n\treturn keyRef;\n}\n\n/* START: Encryption &amp; Decryption with RSA private key */\n\n+ (NSData *)encryptData:(NSData *)data withKeyRef:(SecKeyRef) keyRef isSign:(BOOL)isSign {\n\tconst uint8_t *srcbuf = (const uint8_t *)[data bytes];\n\tsize_t srclen = (size_t)data.length;\n\t\n\tsize_t block_size = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);\n\tvoid *outbuf = malloc(block_size);\n\tsize_t src_block_size = block_size - 11;\n\t\n\tNSMutableData *ret = [[NSMutableData alloc] init];\n\tfor(int idx=0; idx&lt;srclen; idx+=src_block_size){\n\t\t//NSLog(@&quot;%d/%d block_size: %d&quot;, idx, (int)srclen, (int)block_size);\n\t\tsize_t data_len = srclen - idx;\n\t\tif(data_len &gt; src_block_size){\n\t\t\tdata_len = src_block_size;\n\t\t}\n\t\t\n\t\tsize_t outlen = block_size;\n\t\tOSStatus status = noErr;\n        \n        if (isSign) {\n            status = SecKeyRawSign(keyRef,\n                                   kSecPaddingPKCS1,\n                                   srcbuf + idx,\n                                   data_len,\n                                   outbuf,\n                                   &amp;outlen\n                                   );\n        } else {\n            status = SecKeyEncrypt(keyRef,\n                                   kSecPaddingPKCS1,\n                                   srcbuf + idx,\n                                   data_len,\n                                   outbuf,\n                                   &amp;outlen\n                                   );\n        }\n\t\tif (status != 0) {\n\t\t\tNSLog(@&quot;SecKeyEncrypt fail. Error Code: %d&quot;, status);\n\t\t\tret = nil;\n\t\t\tbreak;\n\t\t}else{\n\t\t\t[ret appendBytes:outbuf length:outlen];\n\t\t}\n\t}\n\t\n\tfree(outbuf);\n\tCFRelease(keyRef);\n\treturn ret;\n}\n\n+ (NSString *)encryptString:(NSString *)str privateKey:(NSString *)privKey{\n\tNSData *data = [RSA encryptData:[str dataUsingEncoding:NSUTF8StringEncoding] privateKey:privKey];\n\tNSString *ret = base64_encode_data(data);\n\treturn ret;\n}\n\n+ (NSData *)encryptData:(NSData *)data privateKey:(NSString *)privKey{\n\tif(!data || !privKey){\n\t\treturn nil;\n\t}\n\tSecKeyRef keyRef = [RSA addPrivateKey:privKey];\n\tif(!keyRef){\n\t\treturn nil;\n\t}\n\treturn [RSA encryptData:data withKeyRef:keyRef isSign:YES];\n}\n\n+ (NSData *)decryptData:(NSData *)data withKeyRef:(SecKeyRef) keyRef{\n\tconst uint8_t *srcbuf = (const uint8_t *)[data bytes];\n\tsize_t srclen = (size_t)data.length;\n\t\n\tsize_t block_size = SecKeyGetBlockSize(keyRef) * sizeof(uint8_t);\n\tUInt8 *outbuf = malloc(block_size);\n\tsize_t src_block_size = block_size;\n\t\n\tNSMutableData *ret = [[NSMutableData alloc] init];\n\tfor(int idx=0; idx&lt;srclen; idx+=src_block_size){\n\t\t//NSLog(@&quot;%d/%d block_size: %d&quot;, idx, (int)srclen, (int)block_size);\n\t\tsize_t data_len = srclen - idx;\n\t\tif(data_len &gt; src_block_size){\n\t\t\tdata_len = src_block_size;\n\t\t}\n\t\t\n\t\tsize_t outlen = block_size;\n\t\tOSStatus status = noErr;\n\t\tstatus = SecKeyDecrypt(keyRef,\n\t\t\t\t\t\t\t   kSecPaddingNone,\n\t\t\t\t\t\t\t   srcbuf + idx,\n\t\t\t\t\t\t\t   data_len,\n\t\t\t\t\t\t\t   outbuf,\n\t\t\t\t\t\t\t   &amp;outlen\n\t\t\t\t\t\t\t   );\n\t\tif (status != 0) {\n\t\t\tNSLog(@&quot;SecKeyEncrypt fail. Error Code: %d&quot;, status);\n\t\t\tret = nil;\n\t\t\tbreak;\n\t\t}else{\n\t\t\t//the actual decrypted data is in the middle, locate it!\n\t\t\tint idxFirstZero = -1;\n\t\t\tint idxNextZero = (int)outlen;\n\t\t\tfor ( int i = 0; i &lt; outlen; i++ ) {\n\t\t\t\tif ( outbuf[i] == 0 ) {\n\t\t\t\t\tif ( idxFirstZero &lt; 0 ) {\n\t\t\t\t\t\tidxFirstZero = i;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tidxNextZero = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t[ret appendBytes:&amp;outbuf[idxFirstZero+1] length:idxNextZero-idxFirstZero-1];\n\t\t}\n\t}\n\t\n\tfree(outbuf);\n\tCFRelease(keyRef);\n\treturn ret;\n}\n\n\n+ (NSString *)decryptString:(NSString *)str privateKey:(NSString *)privKey{\n\tNSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n\tdata = [RSA decryptData:data privateKey:privKey];\n\tNSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n\treturn ret;\n}\n\n+ (NSData *)decryptData:(NSData *)data privateKey:(NSString *)privKey{\n\tif(!data || !privKey){\n\t\treturn nil;\n\t}\n\tSecKeyRef keyRef = [RSA addPrivateKey:privKey];\n\tif(!keyRef){\n\t\treturn nil;\n\t}\n\treturn [RSA decryptData:data withKeyRef:keyRef];\n}\n\n/* END: Encryption &amp; Decryption with RSA private key */\n\n/* START: Encryption &amp; Decryption with RSA public key */\n\n+ (NSString *)encryptString:(NSString *)str publicKey:(NSString *)pubKey{\n\tNSData *data = [RSA encryptData:[str dataUsingEncoding:NSUTF8StringEncoding] publicKey:pubKey];\n\tNSString *ret = base64_encode_data(data);\n\treturn ret;\n}\n\n+ (NSData *)encryptData:(NSData *)data publicKey:(NSString *)pubKey{\n\tif(!data || !pubKey){\n\t\treturn nil;\n\t}\n\tSecKeyRef keyRef = [RSA addPublicKey:pubKey];\n\tif(!keyRef){\n\t\treturn nil;\n\t}\n\treturn [RSA encryptData:data withKeyRef:keyRef isSign:NO];\n}\n\n+ (NSString *)decryptString:(NSString *)str publicKey:(NSString *)pubKey{\n\tNSData *data = [[NSData alloc] initWithBase64EncodedString:str options:NSDataBase64DecodingIgnoreUnknownCharacters];\n\tdata = [RSA decryptData:data publicKey:pubKey];\n\tNSString *ret = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n\treturn ret;\n}\n\n+ (NSData *)decryptData:(NSData *)data publicKey:(NSString *)pubKey{\n\tif(!data || !pubKey){\n\t\treturn nil;\n\t}\n\tSecKeyRef keyRef = [RSA addPublicKey:pubKey];\n\tif(!keyRef){\n\t\treturn nil;\n\t}\n\treturn [RSA decryptData:data withKeyRef:keyRef];\n}\n\n/* END: Encryption &amp; Decryption with RSA public key */\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br><span class="line-number">277</span><br><span class="line-number">278</span><br><span class="line-number">279</span><br><span class="line-number">280</span><br><span class="line-number">281</span><br><span class="line-number">282</span><br><span class="line-number">283</span><br><span class="line-number">284</span><br><span class="line-number">285</span><br><span class="line-number">286</span><br><span class="line-number">287</span><br><span class="line-number">288</span><br><span class="line-number">289</span><br><span class="line-number">290</span><br><span class="line-number">291</span><br><span class="line-number">292</span><br><span class="line-number">293</span><br><span class="line-number">294</span><br><span class="line-number">295</span><br><span class="line-number">296</span><br><span class="line-number">297</span><br><span class="line-number">298</span><br><span class="line-number">299</span><br><span class="line-number">300</span><br><span class="line-number">301</span><br><span class="line-number">302</span><br><span class="line-number">303</span><br><span class="line-number">304</span><br><span class="line-number">305</span><br><span class="line-number">306</span><br><span class="line-number">307</span><br><span class="line-number">308</span><br><span class="line-number">309</span><br><span class="line-number">310</span><br><span class="line-number">311</span><br><span class="line-number">312</span><br><span class="line-number">313</span><br><span class="line-number">314</span><br><span class="line-number">315</span><br><span class="line-number">316</span><br><span class="line-number">317</span><br><span class="line-number">318</span><br><span class="line-number">319</span><br><span class="line-number">320</span><br><span class="line-number">321</span><br><span class="line-number">322</span><br><span class="line-number">323</span><br><span class="line-number">324</span><br><span class="line-number">325</span><br><span class="line-number">326</span><br><span class="line-number">327</span><br><span class="line-number">328</span><br><span class="line-number">329</span><br><span class="line-number">330</span><br><span class="line-number">331</span><br><span class="line-number">332</span><br><span class="line-number">333</span><br><span class="line-number">334</span><br><span class="line-number">335</span><br><span class="line-number">336</span><br><span class="line-number">337</span><br><span class="line-number">338</span><br><span class="line-number">339</span><br><span class="line-number">340</span><br><span class="line-number">341</span><br><span class="line-number">342</span><br><span class="line-number">343</span><br><span class="line-number">344</span><br><span class="line-number">345</span><br><span class="line-number">346</span><br><span class="line-number">347</span><br><span class="line-number">348</span><br><span class="line-number">349</span><br><span class="line-number">350</span><br><span class="line-number">351</span><br><span class="line-number">352</span><br><span class="line-number">353</span><br><span class="line-number">354</span><br><span class="line-number">355</span><br><span class="line-number">356</span><br><span class="line-number">357</span><br><span class="line-number">358</span><br><span class="line-number">359</span><br><span class="line-number">360</span><br><span class="line-number">361</span><br><span class="line-number">362</span><br><span class="line-number">363</span><br><span class="line-number">364</span><br><span class="line-number">365</span><br><span class="line-number">366</span><br><span class="line-number">367</span><br><span class="line-number">368</span><br><span class="line-number">369</span><br><span class="line-number">370</span><br><span class="line-number">371</span><br><span class="line-number">372</span><br><span class="line-number">373</span><br><span class="line-number">374</span><br><span class="line-number">375</span><br><span class="line-number">376</span><br><span class="line-number">377</span><br><span class="line-number">378</span><br><span class="line-number">379</span><br><span class="line-number">380</span><br><span class="line-number">381</span><br><span class="line-number">382</span><br><span class="line-number">383</span><br><span class="line-number">384</span><br><span class="line-number">385</span><br><span class="line-number">386</span><br><span class="line-number">387</span><br><span class="line-number">388</span><br><span class="line-number">389</span><br><span class="line-number">390</span><br><span class="line-number">391</span><br><span class="line-number">392</span><br><span class="line-number">393</span><br><span class="line-number">394</span><br><span class="line-number">395</span><br><span class="line-number">396</span><br><span class="line-number">397</span><br><span class="line-number">398</span><br><span class="line-number">399</span><br><span class="line-number">400</span><br><span class="line-number">401</span><br></div></div><p><strong>参考：</strong></p>',3),ln={href:"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html",target:"_blank",rel:"noopener noreferrer"},pn=(0,a.Uk)("RSA算法原理"),bn=(0,a.uE)('<hr><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><h4 id="crc" tabindex="-1"><a class="header-anchor" href="#crc" aria-hidden="true">#</a> CRC</h4><blockquote><p>CRC即<strong>循环冗余校验码</strong>（Cyclic Redundancy Check [1] ）：是数据通信领域中最常用的一种查错校验码，其特征是信息字段和校验字段的长度可以任意选定。</p><p>循环冗余检查（CRC）是一种数据传输检错功能，对数据进行多项式计算，并将得到的结果附在帧的后面，接收设备也执行类似的算法，以保证数据传输的正确性和完整性。</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n#import &lt;zlib.h&gt;\n\nZEXTERN uLong ZEXPORT crc32   OF((uLong crc, const Bytef *buf, uInt len));\n/*\n     Update a running CRC-32 with the bytes buf[0..len-1] and return the\n   updated CRC-32.  If buf is Z_NULL, this function returns the required\n   initial value for the crc.  Pre- and post-conditioning (one&#39;s complement) is\n   performed within this function so it shouldn&#39;t be done by the application.\n\n   Usage example:\n\n     uLong crc = crc32(0L, Z_NULL, 0);\n\n     while (read_buffer(buffer, length) != EOF) {\n       crc = crc32(crc, buffer, length);\n     }\n     if (crc != original_crc) error();\n*/\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>参考</strong></p>',6),cn={href:"http://blog.163.com/du_minchao@126/blog/static/107495394201075114028606/",target:"_blank",rel:"noopener noreferrer"},un=(0,a.Uk)("CRC的校验原理 "),mn={href:"https://www.cnblogs.com/esestt/archive/2007/08/09/848856.html",target:"_blank",rel:"noopener noreferrer"},on=(0,a.Uk)("算法原理"),Sn={href:"https://jin-yang.github.io/post/security-encryption-introduce.html",target:"_blank",rel:"noopener noreferrer"},dn=(0,a.Uk)("加密算法简介"),gn={},yn=(0,e(3744).Z)(gn,[["render",function(n,s){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,(0,a._)("p",null,[(0,a._)("a",t,[l,(0,a.Wm)(e)])]),i,(0,a._)("p",null,[(0,a._)("a",p,[b,(0,a.Wm)(e)])]),(0,a._)("p",null,[(0,a._)("a",c,[u,(0,a.Wm)(e)])]),(0,a._)("p",null,[(0,a._)("a",m,[o,(0,a.Wm)(e)])]),(0,a._)("p",null,[(0,a._)("a",S,[d,(0,a.Wm)(e)])]),g,(0,a._)("blockquote",null,[(0,a._)("p",null,[y,h,(0,a._)("a",f,[k,(0,a.Wm)(e)]),(0,a._)("a",_,[N,(0,a.Wm)(e)]),C,(0,a._)("a",A,[E,(0,a.Wm)(e)]),D,(0,a._)("a",K,[R,(0,a.Wm)(e)]),v,(0,a._)("a",x,[H,(0,a.Wm)(e)]),q,(0,a._)("a",w,[U,(0,a.Wm)(e)]),T,(0,a._)("a",z,[O,(0,a.Wm)(e)]),F,(0,a._)("a",W,[B,(0,a.Wm)(e)]),I,(0,a._)("a",M,[G,(0,a.Wm)(e)]),L,(0,a._)("a",P,[j,(0,a.Wm)(e)]),Z,(0,a._)("a",Y,[V,(0,a.Wm)(e)]),X,(0,a._)("a",J,[Q,(0,a.Wm)(e)]),$])]),nn,(0,a._)("p",null,[sn,en,(0,a._)("a",an,[rn,(0,a.Wm)(e)])]),tn,(0,a._)("p",null,[(0,a._)("a",ln,[pn,(0,a.Wm)(e)])]),bn,(0,a._)("p",null,[(0,a._)("a",cn,[un,(0,a.Wm)(e)])]),(0,a._)("p",null,[(0,a._)("a",mn,[on,(0,a.Wm)(e)])]),(0,a._)("p",null,[(0,a._)("a",Sn,[dn,(0,a.Wm)(e)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[e,a]of s)n[e]=a;return n}}}]);