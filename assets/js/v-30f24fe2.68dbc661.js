"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[602],{677:(a,s,n)=>{n.r(s),n.d(s,{data:()=>e});const e={key:"v-30f24fe2",path:"/shell/notes/string.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"shell/notes/string.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},6812:(a,s,n)=>{n.r(s),n.d(s,{default:()=>c});var e=n(6252);const p=(0,e.uE)('<h5 id="字符串长度" tabindex="-1"><a class="header-anchor" href="#字符串长度" aria-hidden="true">#</a> 字符串长度</h5><p>获取字符串长度语法如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token variable">${<span class="token operator">#</span>varname}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="子字符串" tabindex="-1"><a class="header-anchor" href="#子字符串" aria-hidden="true">#</a> 子字符串</h5><p>子字符串提取语法:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token variable">${varname<span class="token operator">:</span>offset<span class="token operator">:</span>length}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>返回变量 <code>varname</code> 的子字符串，从位置 <code>offset</code> 开始(从 <code>0</code> 开始计算)，长度为 <code>length</code> 。</p><p>如果 <code>offset</code> 为负值，表示从字符串的末尾开始算起。注意，负数前面必须有一个空格， 以防止与 <code>${variable:-word}</code> 的变量的设置默认值语法混淆</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token assign-left variable">foo</span><span class="token operator">=</span><span class="token string">&quot;This string is long.&quot;</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">:</span> -5}</span>\nlong.\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">:</span> -5<span class="token operator">:</span>2}</span>\nlo\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${foo<span class="token operator">:</span> -5<span class="token operator">:-</span>2}</span>\nlon\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="搜索和替换" tabindex="-1"><a class="header-anchor" href="#搜索和替换" aria-hidden="true">#</a> 搜索和替换</h5><h6 id="字符串头部匹配模式" tabindex="-1"><a class="header-anchor" href="#字符串头部匹配模式" aria-hidden="true">#</a> 字符串头部匹配模式</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 如果 pattern 匹配变量 variable 的开头，</span>\n<span class="token comment"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span>\n<span class="token variable">${variable<span class="token operator">#</span>pattern}</span>\n\n<span class="token comment"># 如果 pattern 匹配变量 variable 的开头，</span>\n<span class="token comment"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span>\n<span class="token variable">${variable<span class="token operator">##</span>pattern}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>匹配模式 <code>pattern</code> 可以使用<code>*</code>、<code>?</code>、<code>[]</code>等通配符。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">var</span><span class="token operator">=</span>http://www.aaa.com/123.htm\n\n<span class="token comment"># *// 表示从左边开始删除第一个 // 号及左边的所有字符</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">${var<span class="token operator">#</span>*<span class="token operator">/</span><span class="token operator">/</span>}</span>  \n<span class="token comment"># 结果: www.aaa.com/123.html</span>\n\n<span class="token comment"># ##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符即删除</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">${var<span class="token operator">##</span>*<span class="token operator">/</span>}</span>\n<span class="token comment"># 结果: 123.htm</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="字符串尾部的模式匹配" tabindex="-1"><a class="header-anchor" href="#字符串尾部的模式匹配" aria-hidden="true">#</a> 字符串尾部的模式匹配</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 如果 pattern 匹配变量 variable 的结尾，</span>\n<span class="token comment"># 删除最短匹配（非贪婪匹配）的部分，返回剩余部分</span>\n<span class="token variable">${variable<span class="token operator">%</span>pattern}</span>\n\n<span class="token comment"># 如果 pattern 匹配变量 variable 的结尾，</span>\n<span class="token comment"># 删除最长匹配（贪婪匹配）的部分，返回剩余部分</span>\n<span class="token variable">${variable<span class="token operator">%%</span>pattern}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">var</span><span class="token operator">=</span>http://www.aaa.com/123.htm\n\n<span class="token comment">#  %/* 表示从右边开始，删除第一个 / 号及右边的字符</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">${var<span class="token operator">%</span><span class="token operator">/</span>*}</span>\n<span class="token comment"># 结果: http://www.aaa.com</span>\n\n<span class="token comment">#  %%/* 表示从右边开始，删除最后（最左边）一个 / 号及右边的字符</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">${var<span class="token operator">%%</span><span class="token operator">/</span>*}</span>\n<span class="token comment"># 结果: http</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="任意位置的模式匹配" tabindex="-1"><a class="header-anchor" href="#任意位置的模式匹配" aria-hidden="true">#</a> 任意位置的模式匹配</h6><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 如果 pattern 匹配变量 variable 的一部分，</span>\n<span class="token comment"># 最长匹配（贪婪匹配）的那部分被 string 替换，但仅替换第一个匹配</span>\n<span class="token variable">${variable<span class="token operator">/</span>pattern<span class="token operator">/</span>string}</span>\n\n<span class="token comment"># 如果 pattern 匹配变量 variable 的一部分，</span>\n<span class="token comment"># 最长匹配（贪婪匹配）的那部分被 string 替换，所有匹配都替换</span>\n<span class="token variable">${variable<span class="token operator">/</span><span class="token operator">/</span>pattern<span class="token operator">/</span>string}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>匹配成功，就删除匹配的部分，换成其他的字符串返回。原始变量不会发生变化。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token assign-left variable">path</span><span class="token operator">=</span>/home/cam/foo/foo.name\n\n<span class="token comment"># 替换第一个 foo 为 bar</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${path<span class="token operator">/</span>foo<span class="token operator">/</span>bar}</span>\n<span class="token comment"># 结果: /home/cam/bar/foo.name</span>\n\n<span class="token comment"># 替换所有 foo 为 bar</span>\n$ <span class="token builtin class-name">echo</span> <span class="token variable">${path<span class="token operator">/</span><span class="token operator">/</span>foo<span class="token operator">/</span>bar}</span>\n<span class="token comment"># 结果: /home/cam/bar/bar.name</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h4>',22),l={href:"https://wangdoc.com/bash/string.html",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("字符串操作"),o={},c=(0,n(3744).Z)(o,[["render",function(a,s){const n=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",l,[r,(0,e.Wm)(n)])])],64)}]])},3744:(a,s)=>{s.Z=(a,s)=>{for(const[n,e]of s)a[n]=e;return a}}}]);