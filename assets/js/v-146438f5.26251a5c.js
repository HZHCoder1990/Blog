"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[272],{4667:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-146438f5",path:"/shell/curl.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"shell/curl.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},2175:(n,a,s)=>{s.r(a),s.d(a,{default:()=>r});var e=s(6252);const l=(0,e.uE)('<p align="right">Update: 2020-12-21</p><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>brew <span class="token function">install</span> <span class="token function">curl</span>\t\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h4><h5 id="_1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-基本用法" aria-hidden="true">#</a> 1. 基本用法</h5><p>发送 HTTP 请求，并答应服务器的响应内容</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果想看到更多的响应信息， 可以使用 <code>-i</code> 参数来发送 HTTP 请求</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -i <span class="token punctuation">[</span>url<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="_2-下载文件" tabindex="-1"><a class="header-anchor" href="#_2-下载文件" aria-hidden="true">#</a> 2. 下载文件</h5><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 下载文件并重新命名</span>\n<span class="token function">curl</span> -o <span class="token punctuation">[</span>custom-file-name<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_3-指定请求方法" tabindex="-1"><a class="header-anchor" href="#_3-指定请求方法" aria-hidden="true">#</a> 3. 指定请求方法</h5><p>使用 <code>-X</code> 指定HTTP请求方法， 默认时Get方法.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 发送post请求</span>\n<span class="token function">curl</span> -X POST <span class="token punctuation">[</span>url<span class="token punctuation">]</span>\n\n<span class="token comment"># 发送post请求，并且指定body参数 (指定name 和 age 的值)</span>\n<span class="token function">curl</span> -X POST -d <span class="token string">&quot;name=peak&amp;age=12&quot;</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>\n\n<span class="token comment"># 发送post请求， 并且body参数使用本地文件, 从当前目录下的from_data.json文件中传递参数</span>\n<span class="token function">curl</span> -X POST -d @form_data.json <span class="token punctuation">[</span>url<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="_4-设置请求头" tabindex="-1"><a class="header-anchor" href="#_4-设置请求头" aria-hidden="true">#</a> 4. 设置请求头</h5><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 指定请求头的内容</span>\n<span class="token function">curl</span> -X POST -H <span class="token string">&quot;Accept: application/json&quot;</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_5-其他参数" tabindex="-1"><a class="header-anchor" href="#_5-其他参数" aria-hidden="true">#</a> 5. 其他参数</h5><ul><li><code>-f</code> 不输出所有的服务端错误信息</li><li><code>-s</code> 静默输出</li><li><code>-S</code> 失败时输出错误信息</li><li><code>-L</code> 重定向功能</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h4>',20),c={href:"http://conqueringthecommandline.com/book/curl",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("cURL"),p={},r=(0,s(3744).Z)(p,[["render",function(n,a){const s=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("p",null,[(0,e._)("a",c,[t,(0,e.Wm)(s)])])],64)}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);