"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5728],{9339:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-56d90edc",path:"/shell/xargs.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"shell/xargs.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},7699:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const l=(0,e.uE)('<p align="right">2019-7-22</p><p><code>xargs</code> 可以将接受到的内容转化为后续命令的参数。</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">xargs</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> someCommand\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>参数：</p><ul><li><code>-I</code> 替换字符串;</li><li><code>-n</code> 后面跟数字，表示命令在执行的时候，一次用的参数个数，默认是所有参数;</li><li><code>-t</code> 先打印命令，在执行程序;</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例：</h4><p>定义测试文件 test.txt</p><p>输入如下内容:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>a b c d e f g\nh i j k l m n\no p q\nr s t\nu v w x y z\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li><h5 id="多行变单行" tabindex="-1"><a class="header-anchor" href="#多行变单行" aria-hidden="true">#</a> 多行变单行</h5></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> test.txt <span class="token operator">|</span> <span class="token function">xargs</span>\na b c d e f g h i j k l m n o p q r s t u <span class="token function">v</span> w x y z\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li><h5 id="多行输出" tabindex="-1"><a class="header-anchor" href="#多行输出" aria-hidden="true">#</a> 多行输出</h5></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cat</span> test.txt <span class="token operator">|</span> <span class="token function">xargs</span> -n3\n\na b c\nd e f\ng h i\nj k l\nm n o\np q r\ns t u\n<span class="token function">v</span> w x\ny z\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="3"><li><h5 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h5></li></ol><p>创建 <code>a.js</code> , <code>b.js</code> , <code>c.js</code> 文件, 修改 <code>js</code> 后缀为 <code>.js.backup</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ls</span> *.js <span class="token operator">|</span> <span class="token function">xargs</span> -t -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">mv</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>.backup\n<span class="token function">mv</span> a.js a.js.backup\n<span class="token function">mv</span> b.js b.js.backup\n<span class="token function">mv</span> c.js c.js.backup\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>先列举出所有的 js 文件</p></li><li><p>然后把 js 文件重命名，后缀统一修改为 <code>.js.backup</code></p></li></ul><p>其中:</p><p><code> -t</code> 表示打印参数内容 <code>-I</code> 表示替换 <code>{}</code> 表示以 <code>{}</code> 来代替每一个 js 文件，该字符串可以其他字符串来代替, 例如: <code>ls *.js | xargs -t -I $ mv $ $.backup</code></p><h4 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h4>',21),c={href:"http://www.runoob.com/linux/linux-comm-xargs.html",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("Linux xargs 命令"),r={href:"https://www.cnblogs.com/chyingp/p/linux-command-xargs.html",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("Linux基础：xargs命令"),o={href:"http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html#comment-text",target:"_blank",rel:"noopener noreferrer"},i=(0,e.Uk)("xargs 命令教程"),u={},d=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("p",null,[(0,e._)("a",c,[p,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",r,[t,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",o,[i,(0,e.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);