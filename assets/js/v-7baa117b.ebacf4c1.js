"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3747],{8593:(e,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-7baa117b",path:"/iOS/interview/property.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"iOS属性相关面试题",slug:"ios属性相关面试题",children:[]},{level:3,title:"2. @property的本质？",slug:"_2-property的本质",children:[]},{level:3,title:"4. copy的使用",slug:"_4-copy的使用",children:[]},{level:3,title:"5. weak的使用",slug:"_5-weak的使用",children:[]}],filePathRelative:"iOS/interview/property.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},6859:(e,n,a)=>{a.r(n),a.d(n,{default:()=>ue});var l=a(6252);const r=(0,l.uE)('<h3 id="ios属性相关面试题" tabindex="-1"><a class="header-anchor" href="#ios属性相关面试题" aria-hidden="true">#</a> <p align="center">iOS属性相关面试题</p></h3><h4 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h4><ul><li><p><a href="#all-property-key-words">1. @property中有哪些属性关键字?</a></p></li><li><p><a href="#property-essence">2. @property的本质？</a></p></li><li><p><a href="#atomic">3. 原子属性</a></p></li><li><p><a href="#use-copy">4. copy的使用</a></p></li><li><p><a href="#use-weak">5. weak的使用</a></p></li></ul><h4 id="_1-property中有哪些属性关键字" tabindex="-1"><a class="header-anchor" href="#_1-property中有哪些属性关键字" aria-hidden="true">#</a> 1. <a name="all-property-key-words"></a><code>@property</code>中有哪些属性关键字?</h4><ul><li><p>原子性 -- <code>nonatomic</code>(非原子), <code>atomic</code>(原子)， 默认情况下是<code>atomic</code>;</p></li><li><p>读写权限 -- <code>readwrite</code>(读写), <code>readonly</code>(只读), 默认是<code>readwrite</code>;</p></li><li><p>内存管理 -- <code>assign</code>, <code>strong</code>, <code>weak</code>, <code>copy</code>, <code>unsafe_unretained</code>, 基本数据类型，默认关键字是<code>assign</code>, 普通Objective-C对象，默认是<code>strong</code>;</p><ul><li><p><code>unsafe_unretained</code>相当于<code>weak</code>；区别是，当weak引用的对象释放之后，会自动设置为nil，<code>unsafe_unretained </code>则不会</p></li><li><p><code>weak</code>一般用来解决循环引用， 必须用于OC对象</p></li><li><p><code>assign</code> 用于非OC对象</p></li><li><p><code>copy</code> 制一份原来的内容</p></li></ul></li><li><p>方法名 -- <code>setter</code>, <code>getter</code>; 默认自动合成存取器方法</p></li></ul><h5 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h5>',6),s={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW4",target:"_blank",rel:"noopener noreferrer"},t=(0,l.Uk)("Properties Encapsulate an Object’s Values"),o=(0,l.uE)('<h3 id="_2-property的本质" tabindex="-1"><a class="header-anchor" href="#_2-property的本质" aria-hidden="true">#</a> 2. <a name="property-essence"></a>@property的本质？</h3><p>“属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。 @property的本质是:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@property = ivar + getter + setter;\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>常见问题：</p><ol><li><p><strong>ivar、getter、setter 是如何生成并添加到这个类中的?</strong></p><ul><li>完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“<strong>自动合成</strong>”(autosynthesis)。需要强调的是，这个过程由编译器在<strong>编译期</strong>执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。</li><li>也可以在类的实现代码里通过 @synthesize 语法来指定实例变量的名字.</li></ul></li><li><p><strong>@synthesize和@dynamic分别有什么作用？</strong></p><ul><li>@property有两个对应的词，一个是 <code>@synthesize</code>，一个是 <code>@dynamic</code>。如果 @synthesize和 @dynamic都没写，那么默认的就是@syntheszie var = _var;</li><li><code>@synthesize </code>的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。</li><li><code>@dynamic</code> 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 instance.var = someVar，由于缺 setter 方法会导致程序崩溃；或者当运行到 someVar = var 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</li></ul></li></ol><h4 id="_3-原子属性" tabindex="-1"><a class="header-anchor" href="#_3-原子属性" aria-hidden="true">#</a> 3. <a name="atomic"></a>原子属性</h4><p><code>atomic</code>与<code>nonatomicd</code>的主要区别就是系统自动生成的<code>getter/setter</code>方法不一样</p><ul><li><code>atomic</code>系统自动生成的<code>getter/setter</code>方法会进行加锁操作（<strong>自旋锁</strong>）</li><li><code>nonatomic</code>系统自动生成的<code>getter/setter</code>方法不会进行加锁操作</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@synthesize name = _name;\n- (void)setName:(NSString *)name {\n    @synchronized(self) {\n    _name = [name copy];\n    }\n}\n\n- (NSString *)name {\n    @synchronized(self) {\n        return _name;\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面代码实现了和 <code>atomic</code> 相同的功能，但是底层的工作方式还是有区别的。我们常常用 <code>@synchronized</code> 来加锁，这种锁是<strong>互斥锁</strong>。而 <code>atomic</code> 修饰的属性自带了一把<strong>自旋锁</strong>。</p><p><strong>互斥锁和自旋锁的区别：</strong></p><table><thead><tr><th>锁名</th><th>作用</th></tr></thead><tbody><tr><td>互斥锁</td><td>当某个资源被先进入的线程上了锁以后，其它后面进入的线程会进入<code>休眠状态</code>。<br>当锁释放后，进入休眠状态的线程变为<code>唤醒状态</code>。</td></tr><tr><td>自旋锁</td><td>当某个资源被先进入的线程上了锁以后，其它后进入的线程会开启一个<code>循环</code>，不断检查锁有没有释放，当锁释放后，退出循环开始访问资源，整个过程中后进入的线程一直保持<code>运行状态</code>。</td></tr></tbody></table><p><code>atomic</code>只是保证了<code>getter</code>和<code>setter</code>存取方法的线程安全,并不能保证整个对象是线程安全的,因此在多线程编程时,线程安全还需要开发者自己来处理.</p><p>下面看一个简单的例子：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#import &quot;ViewController.h&quot;\n\n@interface ViewController ()\n@property (atomic, assign) NSInteger count;\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    self.count = 0;\n    \n    NSThread *threadA = [[NSThread alloc] initWithTarget:self selector:@selector(doSomething) object:nil];\n    [threadA start];\n    \n    NSThread *threadB = [[NSThread alloc] initWithTarget:self selector:@selector(doSomething) object:nil];\n    [threadB start];\n}\n\n- (void)doSomething {\n    for (NSInteger i = 0; i &lt; 10; i++) {\n        [NSThread sleepForTimeInterval:1.0];\n        self.count++;\n        NSLog(@&quot;self.count = %@ %@&quot;, @(self.count), [NSThread currentThread]);\n    }\n}\n\n@end\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>为了让异常情况出现的概率提高，加入一句 <code>[NSThread sleepForTimeInterval:1.0];</code>。</p><p>运行上面的代码，会发现打印的结果中，最后一条 <code>self.count</code> 的值往往是小于 20 的，在中间的某些打印日志中，会发现有些数字被重复打印的两次。</p><p><strong>错误原因：</strong> 由于 <strong>atomic</strong> 仅仅能保证<strong>读写</strong>是线程安全的，而不是保证 <strong>读 -&gt; +1 -&gt; 写</strong>，这个整体是线程安全的。</p><p>线程安全的代码：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>- (void)doSomething {\n    for (NSInteger i = 0; i &lt; 10; i++) {\n        [NSThread sleepForTimeInterval:1.0];\n        @synchronized (self) {\n            self.count++;\n        }\n        NSLog(@&quot;self.count = %@ %@&quot;, @(self.count), [NSThread currentThread]);\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><table><thead><tr><th>修饰符</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>nonatomic</td><td>执行效率高，性能好</td><td>不是线程安全的</td></tr><tr><td>atomic</td><td>线程安全，但是仅能保证写操作的线程安全</td><td>大幅降低执行效率</td></tr></tbody></table><h5 id="参考资料-1" tabindex="-1"><a class="header-anchor" href="#参考资料-1" aria-hidden="true">#</a> 参考资料</h5>',22),i={href:"http://liuduo.me/2018/02/08/objective-c-atomic/",target:"_blank",rel:"noopener noreferrer"},c=(0,l.Uk)("Objective-C 原子属性"),p={href:"https://segmentfault.com/a/1190000008808143",target:"_blank",rel:"noopener noreferrer"},d=(0,l.Uk)("从@property说起（三）atomic与多线程锁"),u={href:"https://juejin.im/post/5a31dc76f265da430c11d3ab",target:"_blank",rel:"noopener noreferrer"},b=(0,l.Uk)("iOS中atomic和nonatomic区别及内部实现"),m=(0,l._)("h3",{id:"_4-copy的使用",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_4-copy的使用","aria-hidden":"true"},"#"),(0,l.Uk)(" 4. "),(0,l._)("a",{name:"use-copy"}),(0,l.Uk)("copy的使用")],-1),g=(0,l._)("p",null,"浅拷贝：指针复制, 深拷贝：内容复制",-1),h=(0,l._)("ul",null,[(0,l._)("li",null,"不可变对象copy出来的是不可变对象, 浅拷贝"),(0,l._)("li",null,"不可变对象mutableCopy出来的是可变对象， 深拷贝"),(0,l._)("li",null,"可变对象copy出来的是不可变对象， 深拷贝"),(0,l._)("li",null,"可变对象mutableCopy出来的是可变对象， 深拷贝")],-1),_=(0,l._)("p",null,"常见问题：",-1),k=(0,l._)("p",null,[(0,l._)("strong",null,"用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？")],-1),y=(0,l._)("li",null,"因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.",-1),f=(0,l._)("li",null,"如果我们使用是 strong ,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.",-1),w=(0,l._)("li",null,"NSString、NSArray、NSDictionary 等等经常使用copy关键字，是因为他们有对应的可变类型：NSMutableString、NSMutableArray、NSMutableDictionary；",-1),v=(0,l.Uk)("block 也经常使用 copy 关键字，具体原因见 "),S={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW12",target:"_blank",rel:"noopener noreferrer"},x=(0,l.Uk)("Objects Use Properties to Keep Track of Blocks"),C=(0,l.uE)('<li><p><strong>这个写法会出什么问题：<code>@property (copy) NSMutableArray *array;</code></strong></p><ul><li>添加,删除,修改数组内的元素的时候,程序会因为找不到对应的方法而崩溃.因为 copy 就是复制一个不可变 NSArray 的对象；</li><li>使用了 atomic 属性会严重影响性能 ；</li></ul></li><li><p><strong>block 如何修饰？</strong></p><ul><li>首先，MRR时代用retain修饰block会产生崩溃，因为作为属性的block在初始化时是被存放在静态区的(栈区)，如果block内调用外部变量，那么block无法保留其内存，在初始化的作用域内使用并不会有什么影响，但一旦出了block的初始化作用域，就会引起崩溃。 所有MRC中使用copy修饰，将block拷贝到堆上。</li><li>其次，在ARC时代，因为ARC自动完成了对block的copy，所以修饰block用copy和strong都无所谓。</li></ul></li><li><p><strong>如何让自己的类用 copy 修饰符？</strong></p><ul><li>需声明该类遵从 NSCopying 协议</li><li>实现 NSCopying 协议</li></ul></li><li><p><strong>如何重写带 copy 关键字的 setter？</strong></p><p>代码如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>- (void)setName:(NSString *)name {\n    //[_name release];\n    _name = [name copy];\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li>',4),j=(0,l._)("h5",{id:"参考资料-2",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#参考资料-2","aria-hidden":"true"},"#"),(0,l.Uk)(" 参考资料")],-1),N={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html",target:"_blank",rel:"noopener noreferrer"},O=(0,l.Uk)("Copying Collections"),U=(0,l._)("h3",{id:"_5-weak的使用",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#_5-weak的使用","aria-hidden":"true"},"#"),(0,l.Uk)(" 5. "),(0,l._)("a",{name:"use-weak"}),(0,l.Uk)("weak的使用")],-1),W=(0,l._)("p",null,[(0,l.Uk)("weak 的用处用一句话可归纳为："),(0,l._)("strong",null,"弱引用，在对象释放后置为 nil，避免错误的内存访问"),(0,l.Uk)("。")],-1),T=(0,l._)("p",null,"用更通俗的话来表述是：weak 可以在不增加对象的引用计数的同时，又使得指针的访问是安全的。",-1),A=(0,l._)("p",null,"常见问题：",-1),z=(0,l.uE)('<li><p><strong>什么情况使用 weak 关键字？</strong></p><ul><li>在 ARC 中,在有可能出现循环引用的时候,往往要通过让其中一端使用 weak 来解决,比如: delegate 代理属性</li><li>自身已经对它进行一次强引用,没有必要再强引用一次,此时也会使用 weak,自定义 IBOutlet 控件属性一般也使用 weak；当然，也可以使用strong</li></ul></li><li><p><strong>weak 和 assign 比较</strong></p><ul><li>weak 此特质表明该属性定义了一种“非拥有关系” (nonowning relationship)。为这种属性设置新值时，设置方法既不保留新值，也不释放旧值。此特质同assign类似， 然而在属性所指的对象遭到摧毁时，属性值也会清空(nil out)。 而 assign 的“设置方法”只会执行针对“纯量类型” (scalar type，例如 CGFloat 或 NSlnteger 等)的简单赋值操作。</li><li>assign 可以用非 OC 对象,而 weak 必须用于 OC 对象</li></ul></li><li><p><strong>当weak引用指向的对象被释放时，又是如何去处理weak指针的呢？</strong></p><ul><li><p>调用<code>objc_release</code></p></li><li><p>因为对象的引用计数为0，所以执行<code>dealloc</code></p></li><li><p>在<code>dealloc</code>中，调用了<code>_objc_rootDealloc</code>函数</p></li><li><p>在<code>_objc_rootDealloc</code>中，调用了<code>object_dispose</code>函数</p></li><li><p>调用<code>objc_destructInstance</code></p></li><li><p>最后调用<code>objc_clear_deallocating</code>,详细过程如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>a. 从weak表中获取废弃对象的地址为键值的记录\nb. 将包含在记录中的所有附有 weak修饰符变量的地址，赋值为 nil\nc. 将weak表中该记录删除\nd. 从引用计数表中删除废弃对象的地址为键值的记录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul></li><li><p><strong>使用runtime Associate方法关联的对象, 需要在主对象dealloc的时候释放吗？</strong></p><ul><li>不需要</li></ul></li><li><p><strong>weak实现原理</strong></p><ul><li><code>Runtime</code>维护了一个weak表，用于存储指向某个对象的所有weak指针。weak表其实是一个hash（哈希）表，表的 <code>key</code> 是<strong>对象的内存地址</strong>；<code>value</code> 是<strong>指向该对象的所有弱引用的指针</strong>数组； 具体处理流程如下： <ol><li>初始化时：runtime会调用<code>objc_initWeak</code>函数，初始化一个新的weak指针指向对象的地址。</li><li>添加引用时：<code>objc_initWeak</code>函数会调用 <code>objc_storeWeak()</code> 函数， <code>objc_storeWeak()</code> 的作用是更新指针指向，创建对应的弱引用表。</li><li>释放时，调用<code>clearDeallocating</code>函数。<code>clearDeallocating</code> 函数首先根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象的记录。</li></ol></li></ul></li><li><p><strong>weak属性需要在dealloc中置nil么？</strong></p><ul><li>不需要。 在ARC环境无论是强指针还是弱指针都无需在 dealloc 设置为 nil ， ARC 会自动帮我们处理</li></ul></li>',6),I=(0,l._)("p",null,[(0,l._)("strong",null,"SideTable")],-1),R=(0,l._)("code",null,"SideTable",-1),D=(0,l.Uk)("是一个用"),E=(0,l._)("code",null,"C++",-1),M=(0,l.Uk)("实现的类，它的具体定义在"),B={href:"https://opensource.apple.com/source/objc4/objc4-532.2/runtime/NSObject.mm",target:"_blank",rel:"noopener noreferrer"},P=(0,l.Uk)("NSObject.mm"),q=(0,l.Uk)("中, 它主要用于管理对象的引用计数和 weak 表。在 NSObject.mm 中声明其数据结构："),L=(0,l.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>struct SideTable {\n\t// 保证原子操作的自旋锁\n    spinlock_t slock;\n    // 引用计数的 hash 表\n    RefcountMap refcnts;\n    // weak 引用全局 hash 表\n    weak_table_t weak_table;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',1),V=(0,l.Uk)("weak表是一个弱引用表，实现为一个weak_table_t结构体，存储了某个对象相关的的所有的弱引用信息。其定义如下(具体定义在"),F={href:"https://opensource.apple.com/source/objc4/objc4-646/runtime/objc-weak.h",target:"_blank",rel:"noopener noreferrer"},H=(0,l.Uk)("objc-weak.h"),K=(0,l.Uk)("中)："),X=(0,l._)("pre",null,[(0,l._)("code",null," ```\n struct weak_table_t {\n     // 保存了所有指向指定对象的 weak 指针\n     weak_entry_t *weak_entries;\n     // 存储空间\n     size_t    num_entries;\n     // 参与判断引用计数辅助量\n     uintptr_t mask;\n     // hash key 最大偏移值\n     uintptr_t max_hash_displacement;\n };\n ```\n")],-1),Z=(0,l.uE)('<li><p><strong>weak singleton</strong></p><p>一种特殊的单例有一个有意思的特性：在所有使用该单例的对象都释放后，单例对象本身也会自己释放。</p><p>我所见过的大部分单例使用场景，被创建都单例最后都会一直存活着，比如注册登录模块所需要共享状态所创建的 XXLoginManager，即使在用户注册成功进入主界面之后也不会被显式的释放，这在一定程度上会带来内存使用的浪费。<br>所谓的「weak singleton」代码很简单：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>+ (id)sharedInstance\n{\n    static __weak ASingletonClass *instance;\n    ASingletonClass *strongInstance = instance;\n    @synchronized(self) {\n        if (strongInstance == nil) {\n            strongInstance = [[[self class] alloc] init];\n            instance = strongInstance;\n        }\n    }\n    return strongInstance;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li>',1),G=(0,l._)("p",null,[(0,l._)("strong",null,"IBOutlet连出来的视图属性为什么可以被设置成weak?")],-1),Y={href:"http://stackoverflow.com/questions/7678469/should-iboutlets-be-strong-or-weak-under-arc",target:"_blank",rel:"noopener noreferrer"},J=(0,l.Uk)("Should IBOutlets be strong or weak under ARC?"),Q=(0,l.Uk)(" 文章告诉我们： 因为既然有外链那么视图在xib或者storyboard中肯定存在，视图已经对它有一个强引用了。"),$=(0,l._)("li",null,[(0,l._)("p",null,"不过这个回答漏了个重要知识，使用storyboard（xib不行）创建的vc，会有一个叫_topLevelObjectsToKeepAliveFromStoryboard的私有数组强引用所有top level的对象，所以这时即便outlet声明成weak也没关系")],-1),ee=(0,l._)("h4",{id:"参考资料-3",tabindex:"-1"},[(0,l._)("a",{class:"header-anchor",href:"#参考资料-3","aria-hidden":"true"},"#"),(0,l.Uk)(" 参考资料")],-1),ne={href:"http://mrpeak.cn/blog/ios-weak/",target:"_blank",rel:"noopener noreferrer"},ae=(0,l.Uk)("iOS weak 关键字漫谈"),le={href:"https://www.jianshu.com/p/7c6400a04e58",target:"_blank",rel:"noopener noreferrer"},re=(0,l.Uk)("iOS-实现weak后，为什么对象释放后会自动为nil"),se={href:"https://www.jianshu.com/p/13c4fb1cedea",target:"_blank",rel:"noopener noreferrer"},te=(0,l.Uk)("iOS 底层解析weak的实现原理"),oe={href:"http://zhoulingyu.com/2017/02/15/Advanced-iOS-Study-objc-Memory-2/",target:"_blank",rel:"noopener noreferrer"},ie=(0,l.Uk)("iOS（Objective-C）内存管理"),ce={href:"http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/",target:"_blank",rel:"noopener noreferrer"},pe=(0,l.Uk)("Objective-C 引用计数原理"),de={},ue=(0,a(3744).Z)(de,[["render",function(e,n){const a=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[r,(0,l._)("p",null,[(0,l._)("a",s,[t,(0,l.Wm)(a)])]),o,(0,l._)("ol",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",i,[c,(0,l.Wm)(a)])])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",p,[d,(0,l.Wm)(a)])])]),(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",u,[b,(0,l.Wm)(a)])])])]),m,g,h,_,(0,l._)("ol",null,[(0,l._)("li",null,[k,(0,l._)("ul",null,[y,f,w,(0,l._)("li",null,[v,(0,l._)("a",S,[x,(0,l.Wm)(a)])])])]),C]),j,(0,l._)("p",null,[(0,l._)("a",N,[O,(0,l.Wm)(a)])]),U,W,T,A,(0,l._)("ol",null,[z,(0,l._)("li",null,[I,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[R,D,E,M,(0,l._)("a",B,[P,(0,l.Wm)(a)]),q]),L])]),(0,l._)("p",null,[V,(0,l._)("a",F,[H,(0,l.Wm)(a)]),K]),X]),Z,(0,l._)("li",null,[G,(0,l._)("ul",null,[(0,l._)("li",null,[(0,l._)("p",null,[(0,l._)("a",Y,[J,(0,l.Wm)(a)]),Q])]),$])])]),ee,(0,l._)("ol",null,[(0,l._)("li",null,[(0,l._)("a",ne,[ae,(0,l.Wm)(a)])]),(0,l._)("li",null,[(0,l._)("a",le,[re,(0,l.Wm)(a)])]),(0,l._)("li",null,[(0,l._)("a",se,[te,(0,l.Wm)(a)])]),(0,l._)("li",null,[(0,l._)("a",oe,[ie,(0,l.Wm)(a)])]),(0,l._)("li",null,[(0,l._)("a",ce,[pe,(0,l.Wm)(a)])])])],64)}]])},3744:(e,n)=>{n.Z=(e,n)=>{for(const[a,l]of n)e[a]=l;return e}}}]);