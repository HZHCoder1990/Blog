"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[989],{6524:(e,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-62271b3c",path:"/shell/awk.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"shell/awk.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},2724:(e,a,n)=>{n.r(a),n.d(a,{default:()=>k});var t=n(6252);const l=(0,t.uE)('<p align="right">2019-7-14</p> awk 是处理文本的工具，Mac 自带这个程序。 <p>适合文本比较复杂的格式化数据。</p><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>模式-动作<span class="token punctuation">]</span> 文件名\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>awk 会一行一行的处理文件里面的内容。</p><h5 id="可选参数说明" tabindex="-1"><a class="header-anchor" href="#可选参数说明" aria-hidden="true">#</a> 可选参数说明:</h5><ul><li><code>-F</code> 指定分隔符, 默认是以空格作为分隔符;</li><li><code>-f</code> 从脚本文件中读取 awk 命令;</li></ul><p>可选参数可以省略。</p><h5 id="模式-动作-说明" tabindex="-1"><a class="header-anchor" href="#模式-动作-说明" aria-hidden="true">#</a> 模式-动作 说明:</h5><p>其中模式可以有 0 个或者多个，每一行的内容会依次测试每个模式，所有的模式都匹配之后，会执行相应的动作。</p><p>每个模式或者动作里面可以使用 awk 中的 <a href="#operator">运算符</a>， <a href="#variable">内置变量</a>， <a href="#function">内置函数</a>等。</p><p>假设有一个 emp.data 文件， 里面内容是部分 NBA 球员的姓名，身高， 年龄的数据:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Stephen Curry, 1.91, 31\nKevin Durant, 2.06, 30\nLeBron James, 2.03, 34\nRussell Westbrook, 1.92, 30\nKyrie Lrving, 1.90, 27\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li><h6 id="没有模式" tabindex="-1"><a class="header-anchor" href="#没有模式" aria-hidden="true">#</a> 没有模式</h6></li></ol><p>输出每一行的内容, 使用如下命令:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>awk &#39;{print $0}&#39; emp.data \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Stephen Curry, 1.91, 31\nKevin Durant, 2.06, 30\nLeBron James, 2.03, 34\nRussell Westbrook, 1.92, 30\nKyrie Lrving, 1.90, 27\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>输出第一列的内容, 使用如下命令:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>awk &#39;{print $1}&#39; emp.data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Stephen\nKevin\nLeBron\nRussell\nKyrie\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>发现第一列的姓名没有显示完全, 因为 awk 默认是以空格作为分隔符的，如果需要显示完全需要我们显示的指定分隔符。</p><p>输出每个人的名字, 使用如下命令:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>awk -F &quot;,&quot; &#39;{print $1}&#39; emp.data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Stephen Curry\nKevin Durant\nLeBron James\nRussell Westbrook\nKyrie Lrving\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>输出每个球员名字的小写字母, 使用如下命令:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>awk -F &quot;,&quot; &#39; {print tolower($1)}&#39; emp.data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>stephen curry\nkevin durant\nlebron james\nrussell westbrook\nkyrie lrving\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li><h6 id="单个模式" tabindex="-1"><a class="header-anchor" href="#单个模式" aria-hidden="true">#</a> 单个模式</h6></li></ol><p>输出年龄大于30岁的球员的姓名和身高, 使用如下命令:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>awk -F &quot;,&quot; &#39;$3 &gt; 30 {print $1, $2}&#39; emp.data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Stephen Curry  1.91\nLeBron James  2.03\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>输出姓名大于12个字符(含空格)的球员信息, 使用如下命令:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>awk -F &quot;,&quot; &#39;length($1) &gt; 12 {print $0}&#39; emp.data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Stephen Curry, 1.91, 31\nRussell Westbrook, 1.92, 30\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li><h6 id="多个模式" tabindex="-1"><a class="header-anchor" href="#多个模式" aria-hidden="true">#</a> 多个模式</h6></li></ol><p>输出年龄大于30岁，并且身高大于2米的球员的信息，使用如下命令:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>awk -F &quot;,&quot; &#39;$3 &gt; 30 &amp;&amp;  $2 &gt; 2.00 {print $0}&#39; emp.data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>LeBron James, 2.03, 34\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="awk-脚本" tabindex="-1"><a class="header-anchor" href="#awk-脚本" aria-hidden="true">#</a> awk 脚本</h4><p>语法结构如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>BEGIN {放置的是执行前的语句}\n{处理每一行时要执行的语句}\nEND {处理完所有的行后要执行的语句}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中 <code>BEGIN</code> 和 <code>END</code> 都是可选的。</p><p>统计所有球员的总身高，使用如下命令:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>awk -F &quot;,&quot; &#39;{sum+=$2} END {print sum}&#39; emp.data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中 <code>sum</code> 为自定义的变量， <code>$2</code> 为内置变量，表示第二列的值。</p><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>9.82\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> <a name="operator"></a> 运算符</h4><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">= += -= *= /= %= ^= **=</td><td style="text-align:left;">赋值</td></tr><tr><td style="text-align:left;">?:</td><td style="text-align:left;">C条件表达式</td></tr><tr><td style="text-align:left;">||</td><td style="text-align:left;">逻辑或</td></tr><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">逻辑与</td></tr><tr><td style="text-align:left;">~ ~!</td><td style="text-align:left;">匹配正则表达式和不匹配正则表达式</td></tr><tr><td style="text-align:left;">&lt; &lt;= &gt; &gt;= != ==</td><td style="text-align:left;">关系运算符</td></tr><tr><td style="text-align:left;">空格</td><td style="text-align:left;">连接</td></tr><tr><td style="text-align:left;">+ -</td><td style="text-align:left;">加，减</td></tr><tr><td style="text-align:left;">* / %</td><td style="text-align:left;">乘，除与求余</td></tr><tr><td style="text-align:left;">+ - !</td><td style="text-align:left;">一元加，减和逻辑非</td></tr><tr><td style="text-align:left;">^ ***</td><td style="text-align:left;">求幂</td></tr><tr><td style="text-align:left;">++ --</td><td style="text-align:left;">增加或减少，作为前缀或后缀</td></tr><tr><td style="text-align:left;">$</td><td style="text-align:left;">字段引用</td></tr><tr><td style="text-align:left;">in</td><td style="text-align:left;">数组成员</td></tr></tbody></table><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> <a name="variable"></a>变量</h4><p><code>$ + 数字</code> 表示某个字段： <code>$1</code> 表示第一个字段， <code>$2</code> 表示第二个字段， <code>$3</code> 表示第三个字段, … , <code>$0</code> 表示一整行。</p><p>变量 <code>NF</code> 表示当前行有多少个字段。</p><p>变量 <code>NR</code> 表示当前是第几行。</p><p>其他常用变量：</p><ul><li><code>FILENAME</code>：当前文件名</li><li><code>FS</code>：字段分隔符，默认是空格和制表符。</li><li><code>RS</code>：行分隔符，用于分割每一行，默认是换行符。</li><li><code>OFS</code>：输出字段的分隔符，用于打印时分隔字段，默认为空格。</li><li><code>ORS</code>：输出记录的分隔符，用于打印时分隔记录，默认为换行符。</li><li><code>OFMT</code>：数字输出的格式，默认为<code>％.6g</code>。</li></ul><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> <a name="function"></a>函数</h4><p>常用的函数如下：</p><ul><li><code>tolower()</code>：字符转为小写。</li><li><code>toupper()</code>: 字符串转为大写。</li><li><code>length()</code>：返回字符串长度。</li><li><code>substr()</code>：返回子字符串。</li><li><code>sin()</code>：正弦。</li><li><code>cos()</code>：余弦。</li><li><code>sqrt()</code>：平方根。</li><li><code>rand()</code>：随机数。</li></ul>',66),s=(0,t._)("code",null,"awk",-1),r=(0,t.Uk)(" 内置函数的完整列表，可以查看"),d={href:"https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html#Built_002din",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Uk)("手册"),p=(0,t.Uk)("。"),c=(0,t._)("h4",{id:"参考",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),(0,t.Uk)(" 参考")],-1),o={href:"http://www.ruanyifeng.com/blog/2018/11/awk.html",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("awk 入门教学"),b={href:"https://www.runoob.com/linux/linux-comm-awk.html",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Uk)("Linux awk 命令"),g={href:"https://coolshell.cn/articles/9070.html",target:"_blank",rel:"noopener noreferrer"},x=(0,t.Uk)("awk 简明教程"),h={href:"https://awk.readthedocs.io/en/latest/chapter-one.html",target:"_blank",rel:"noopener noreferrer"},v=(0,t.Uk)("awk 入门指南"),f={},k=(0,n(3744).Z)(f,[["render",function(e,a){const n=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[l,(0,t._)("p",null,[s,r,(0,t._)("a",d,[i,(0,t.Wm)(n)]),p]),c,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",o,[u,(0,t.Wm)(n)])]),(0,t._)("li",null,[(0,t._)("a",b,[m,(0,t.Wm)(n)])]),(0,t._)("li",null,[(0,t._)("a",g,[x,(0,t.Wm)(n)])]),(0,t._)("li",null,[(0,t._)("a",h,[v,(0,t.Wm)(n)])])])],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{for(const[n,t]of a)e[n]=t;return e}}}]);