"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6530],{9745:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4c0010b8",path:"/iOS/attribute.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"__attribute__",slug:"attribute",children:[]},{level:3,title:"constructor",slug:"constructor",children:[]},{level:3,title:"unused",slug:"unused",children:[]},{level:3,title:"cleanup",slug:"cleanup",children:[]}],filePathRelative:"iOS/attribute.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},7731:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(6252);const e=(0,t.uE)('<h3 id="attribute" tabindex="-1"><a class="header-anchor" href="#attribute" aria-hidden="true">#</a> <code>__attribute__</code></h3><p><code>__attribute__</code> 用于修饰 变量、结构体、函数、类型的关键字。</p><p>语法形式：</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>attribute1<span class="token punctuation">,</span> attribute2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__attribute1__<span class="token punctuation">,</span> __attribute2__<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>常见用法</p>',5),p=(0,t.uE)("<li><code>__attribute__((alias))</code></li><li><code>__attribute__((always_inline))</code></li><li><code>__attribute__((const))</code></li><li><code>__attribute__((constructor(priority)))</code></li><li><code>__attribute__((deprecated))</code></li><li><code>__attribute__((malloc))</code></li><li><code>__attribute__((nonull))</code></li><li><code>__attribute__((unused))</code></li><li><code>__attribute__((used))</code></li>",9),c={href:"https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_chr1383738420227.htm",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("更多用法..."),l=(0,t.uE)('<h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p><code>__attribute__((constructor))</code> 修饰的函数会在main函数之前调用。</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>__attribute__((constructor(priority))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>priority</code> 表示调用的优先级，是一个可选的整数。</p><p><code>priority</code> 值越小优先级越高。</p><p>有 <code>priority</code> 修饰的优先级高于没有的。</p><p><code>priority</code> 小于100的用作保留字段。</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token keyword">void</span> <span class="token function">my_constructor1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">my_constructor2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">my_constructor3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">my_constructor1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">/* This is the 3rd constructor */</span>\n<span class="token punctuation">{</span>                        <span class="token comment">/* function to be called */</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Called my_constructor1()\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token function">my_constructor2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">/* This is the 1st constructor */</span>\n<span class="token punctuation">{</span>                         <span class="token comment">/* function to be called */</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Called my_constructor2()\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token function">my_constructor3</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">/* This is the 2nd constructor */</span>\n<span class="token punctuation">{</span>                         <span class="token comment">/* function to be called */</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Called my_constructor3()\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Called main()\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>上面程序产生如下输出:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Called <span class="token function">my_constructor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nCalled <span class="token function">my_constructor3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nCalled <span class="token function">my_constructor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nCalled <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h4><p>https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_chr1383738546439.htm</p><h3 id="unused" tabindex="-1"><a class="header-anchor" href="#unused" aria-hidden="true">#</a> unused</h3><p>如果函数、变量等，未被引用，用 <code>__attrubute__((unused))</code> 修饰可以阻止编译器生成警告。</p><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h4><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unused<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="参考资料-1" tabindex="-1"><a class="header-anchor" href="#参考资料-1" aria-hidden="true">#</a> 参考资料</h4><p>https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_chr1393261558987.htm</p><h3 id="cleanup" tabindex="-1"><a class="header-anchor" href="#cleanup" aria-hidden="true">#</a> cleanup</h3><p>用于修饰一个变量，在它的作用域结束后自动执行一个指定的方法。</p><blockquote><p>The <code>cleanup</code> attribute runs a function when the variable goes out of scope. This attribute can only be applied to auto function scope variables; it may not be applied to parameters or variables with static storage duration. The function must take one parameter, a pointer to a type compatible with the variable. The return value of the function (if any) is ignored.</p></blockquote><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example</h4><div class="language-objective ext-objective line-numbers-mode"><pre class="language-objective"><code>static void stringCleanUp(__strong NSString **string) {\n    NSLog(@&quot;%@&quot;, *string);\n}\n\nstatic void blockCleanUp(__strong void(^*block)(void)) {\n  \tNSLog(@&quot;call block&quot;);\n    (*block)();\n}\n\n- (void)test {\n    __strong NSString *string __attribute__((cleanup(stringCleanUp), unused)) = @&quot;peak&quot;;\n    void (^block)(void)  __attribute__((cleanup(blockCleanUp), unused)) = ^ {\n        NSLog(@&quot;this is a block implementation.&quot;);\n    };\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h4><p>https://nshipster.com/<strong>attribute</strong>/</p>',27),u={},i=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("ul",null,[p,(0,t._)("li",null,[(0,t._)("a",c,[o,(0,t.Wm)(a)])])]),l],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}}}]);