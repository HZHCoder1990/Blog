"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8615],{9386:(s,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a={key:"v-284ba802",path:"/shell/sed.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"sed 使用总结",slug:"sed-使用总结",children:[]}],filePathRelative:"shell/sed.md",git:{updatedTime:1633945792e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:2}]}}},100:(s,e,n)=>{n.r(e),n.d(e,{default:()=>j});var a=n(6252);const l=(0,a.uE)('<h3 id="sed-使用总结" tabindex="-1"><a class="header-anchor" href="#sed-使用总结" aria-hidden="true">#</a> sed 使用总结</h3><h4 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h4><p>创建 <code>dog.txt</code> 文件，输入如下内容</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>I have a dog, my cat&#39;s name is xxx.\nI love my dog.\nMy dog love my too.\nMy dog was 2 years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>替换每一行中第一次出现的 <code>dog</code> 为 <code>cat</code> 。（<strong>注</strong> 在替换的时候，不仅仅是 <code>/</code> 可作为分隔符， 其他字符也可作为分隔符， 只需要前后的分隔符一致即可）</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sed &#39;s/dog/cat/&#39; dog.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果为:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>I have a cat, my cat&#39;s name is xxx.\nI love my cat.\nMy cat love my too.\nMy cat was 2 years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="全部替换" tabindex="-1"><a class="header-anchor" href="#全部替换" aria-hidden="true">#</a> 全部替换</h5><p><code>g</code> 表示把左右的 <code>dog</code> 替换为 <code>cat</code> 。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ sed &#39;s/dog/cat/g&#39; dog.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>结果为:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>I have a cat, my cat&#39;s name is xxx.\nI love my cat.\nMy cat love my too.\nMy cat was 2 years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="替换指定内容" tabindex="-1"><a class="header-anchor" href="#替换指定内容" aria-hidden="true">#</a> 替换指定内容</h5><p>替换第2行</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ sed &quot;2s/dog/cat/g&quot; dog.txt \nI have a dog, my cat&#39;s name is xxx.\nI love my cat.\nMy dog love my too.\nMy dog was 2 years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>替换3-5行</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ sed &#39;3,5s/dog/cat/g&#39; dog.txt \nI have a dog, my cat&#39;s name is xxx.\nI love my dog.\nMy cat love my too.\nMy cat was 2 years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>替换最后一行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">sed</span> <span class="token string">&#39;$s/dog/cat/g&#39;</span> dog.txt \nI have a dog, my cat&#39;s name is xxx.\nI love my dog.\nMy dog love my too.\nMy <span class="token function">cat</span> was <span class="token number">2</span> years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>替换第2行到最后一行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">sed</span> <span class="token string">&#39;2,$s/dog/cat/g&#39;</span> dog.txt \nI have a dog, my cat&#39;s name is xxx.\nI love my cat.\nMy <span class="token function">cat</span> love my too.\nMy <span class="token function">cat</span> was <span class="token number">2</span> years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>只替换每一行第一个o</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">sed</span> <span class="token string">&#39;s/o/O/1&#39;</span> dog.txt \nI have a dOg, my cat&#39;s name is xxx.\nI lOve my dog.\nMy dOg love my too.\nMy dOg was <span class="token number">2</span> years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>只替换每一行第一个o</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/o/O/2&#39;</span> dog.txt \nI have a dog, my cat&#39;s name is xxx.\nI love my dOg.\nMy dog lOve my too.\nMy dog was <span class="token number">2</span> years Old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="替换源文件" tabindex="-1"><a class="header-anchor" href="#替换源文件" aria-hidden="true">#</a> 替换源文件</h5><p>使用 <code>-i</code> 参数编辑源文件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> -i <span class="token string">&quot;s/dog/cat/g&quot;</span> dog.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在 <code>Mac</code> 上会出现如下错误</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sed: 1: &quot;dog.txt&quot;: extra characters at the end of d command\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>原因：</p><p><code>sed</code> 编辑源文件的时候，需要指定一个文件后缀，<code>sed</code> 把源文件添加后缀后进行备份，如果后缀名称长度为 0 ，则不会进行备份。</p><div class="language-shelll ext-shelll line-numbers-mode"><pre class="language-shelll"><code> Edit files in-place, saving backups with the specified extension.\n If a zero-length extension is given, no backup will be saved.  It\n is not recommended to give a zero-length extension when in-place\n editing files, as you risk corruption or partial content in situ-\n ations where disk space is exhausted, etc.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>解决方式: 添加长度为 <code>0</code> 的后缀名称。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sed -i &#39;&#39; &quot;s/dog/cat/g&quot; dog.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h4><ul><li><code>^</code> 表示一行的开头。如：<code>/^#/</code> 以 <code>#</code> 开头的匹配。</li><li><code>$</code> 表示一行的结尾。如：<code>/}$/</code> 以 <code>}</code> 结尾的匹配。</li><li><code>\\&lt;</code> 表示词首。 如：<code>\\&lt;abc</code> 表示以 <code>abc</code> 为首的词。</li><li><code>\\&gt;</code> 表示词尾。 如：<code>abc\\&gt;</code> 表示以 <code>abc</code> 结尾的词。</li><li><code>.</code> 表示任何单个字符。</li><li><code>*</code> 表示某个字符出现了0次或多次。</li><li><code>[ ]</code> 字符集合。 如：<code>[abc]</code> 表示匹配a或b或c，还有 <code>[a-zA-Z]</code> 表示匹配所有的26个字符。如果其中有^表示反，如 <code>[^a]</code> 表示非a的字符。</li><li><code>&amp;</code> 保存搜索字符用来替换其他字符，如 <code>s/love/-&amp;-/</code>，love替换成 <code>-love-</code>。</li></ul><h4 id="多个匹配" tabindex="-1"><a class="header-anchor" href="#多个匹配" aria-hidden="true">#</a> 多个匹配</h4><p><code>-e</code> 选项允许在同一行里执行多条命令：（第 1 行到第 3 行的 <code>dog</code> 替换成 <code>cat</code> ，第 3 行到最后一行的 <code>My</code> 替换成 <code>Her</code> ）</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ sed -e &#39;1,3s/dog/cat/g&#39; -e &#39;3,$s/My/Her/g&#39; dog.txt \nI have a cat, my cat&#39;s name is xxx.\nI love my cat.\nHer cat love my too.\nHer dog was 2 years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>使用 <code>&amp;</code> 来当做被匹配的变量, 在该变量左右添加其他字符</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ sed &#39;s/My/**&amp;**/g&#39; dog.txt \nI have a dog, my cat&#39;s name is xxx.\nI love my dog.\n**My** dog love my too.\n**My** dog was 2 years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h4>',44),c=(0,a.Uk)("在第 1 行上插入 "),o=(0,a._)("code",null,"I have a cat.",-1),p=(0,a.Uk)(" 。(1 表示第1行， i 表示插入的意思。在 Mac 上， "),r=(0,a._)("code",null,"i\\",-1),t=(0,a.Uk)(" 之后需要换行，原因参考"),d={href:"https://unix.stackexchange.com/questions/52131/sed-on-osx-insert-at-a-certain-line?answertab=votes#tab-top",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("这里"),u=(0,a.Uk)(")"),b=(0,a.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">sed</span> <span class="token string">&#39;1 i\\\nI have a cat. &#39;</span> dog.txt\nI have a cat. I have a dog, my cat&#39;s name is xxx.\nI love my dog.\nMy dog love my too.\nMy dog was <span class="token number">2</span> years old.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="追加" tabindex="-1"><a class="header-anchor" href="#追加" aria-hidden="true">#</a> 追加</h4><p>在最后一行追加 <code>Test append.</code> 。(在 Mac 上，<code>a\\</code> 之后需要换行， 具体原因同上)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;$ a\\\nTest append.&#39;</span> dog.txt\nI have a dog, my cat&#39;s name is xxx.\nI love my dog.\nMy dog love my too.\nMy dog was <span class="token number">2</span> years old.\nTest append.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',4),m={id:"删除操作",tabindex:"-1"},g=(0,a._)("a",{class:"header-anchor",href:"#删除操作","aria-hidden":"true"},"#",-1),h=(0,a.Uk)(),v={href:"http://man.linuxde.net/sed",target:"_blank",rel:"noopener noreferrer"},x=(0,a.Uk)("删除操作"),k=(0,a.uE)('<p>删除空白行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/^$/d&#39;</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>删除连续空白行，只保留一个空行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> -i <span class="token string">&#39;&#39;</span> <span class="token string">&#39;N;/^\\n/D&#39;</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>删除文件的第2行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;2d&#39;</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>删除文件的第2行到末尾所有行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;2,$d&#39;</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>删除文件最后一行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;$d&#39;</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>删除文件中所有开头是test的行：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;/^test/&#39;</span>d <span class="token punctuation">[</span>file<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="pattern-space-和-hold-space-理解" tabindex="-1"><a class="header-anchor" href="#pattern-space-和-hold-space-理解" aria-hidden="true">#</a> <code>Pattern Space</code> 和 <code>Hold Space</code> 理解</h4><p><code>sed</code> 会逐行处理文件， 首先 <code>sed</code> 把当前正在处理的行保存在一个临时缓存区中（<code>Pattern Space</code>），然后处理临时缓冲区中的行，完成后把该行发送到屏幕上。<code>sed</code> 每处理完一行就将其从临时缓冲区删除，然后将下一行读入，进行处理和显示。处理完输入文件的最后一行后，<code>sed</code> 便结束运行。</p><p><code>Hold Space</code> 能够长期存贮 <code>sed</code>读取的数据，当 sed 在其他行处理我们可以重用 <code>Hold Space</code> 空间里面的数据， 但是不能直接访问 <code>Hold Space</code> 内的数据，而是如果要对其执行某些操作，则需要将其复制或附加到 <code>Pattern Space</code> 。</p><p><code>g</code>： 将 <code>hold space</code> 中的内容拷贝到 <code>pattern space</code> 中，原来 <code>pattern space</code> 里的内容清除; <code>G</code>： 将 <code>hold space</code> 中的内容append到 <code>pattern space</code> 后 <code>h</code>： 将 <code>pattern space</code> 中的内容拷贝到 <code>hold space</code> 中，原来的 <code>hold space</code> 里的内容被清除 <code>H</code>： 将 <code>pattern space</code> 中的内容append到 <code>hold space</code> 后 <code>x</code>： 交换 <code>pattern space</code> 和 <code>hold space</code> 的内容</p><p>使用如下示例文件</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">cat</span> t.txt\none\ntwo\nthree\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',18),f=(0,a.Uk)("反序输出文件每一行的内容：（参考"),y={href:"https://coolshell.cn/articles/9104.html",target:"_blank",rel:"noopener noreferrer"},I=(0,a.Uk)("sed 简明教程"),M=(0,a.Uk)("）"),w=(0,a.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">sed</span> <span class="token string">&#39;1!G;h;$!d&#39;</span> t.txt\nthree\ntwo\none\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中的 ‘1!G;h;$!d’ 可拆解为三个命令</p><ul><li>1!G —— 只有第一行不执行G命令，将hold space中的内容append回到pattern space</li><li>h —— 第一行都执行h命令，将pattern space中的内容拷贝到hold space中</li><li>$!d —— 除了最后一行不执行d命令，其它行都执行d命令，删除当前行</li></ul><p><img src="https://coolshell.cn/wp-content/uploads/2013/02/sed_demo.jpg" alt="执行序列图"></p><h4 id="用法举例" tabindex="-1"><a class="header-anchor" href="#用法举例" aria-hidden="true">#</a> 用法举例</h4><h5 id="从provisioning-profiles中提取-codesign" tabindex="-1"><a class="header-anchor" href="#从provisioning-profiles中提取-codesign" aria-hidden="true">#</a> 从provisioning profiles中提取 codeSign</h5><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># URL: https://mgrebenets.github.io/mobile%20ci/2015/05/15/provisioning-profiles-sigh</span>\n\n<span class="token assign-left variable">codeSign</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>/usr/libexec/PlistBuddy -c <span class="token string">&#39;Print :DeveloperCertificates:0&#39;</span> /dev/stdin <span class="token operator">&lt;&lt;&lt;</span> <span class="token punctuation">$(</span>security cms -D -i <span class="token string">&quot;<span class="token variable">$path_to_mobileprovision</span>&quot;</span><span class="token punctuation">)</span> <span class="token operator">|</span> openssl x509 -inform DER -noout -subject <span class="token operator">|</span> <span class="token function">sed</span> -n <span class="token string">&#39;/^subject/s/^.*CN=\\(.*\\)\\/OU=.*/\\1/p&#39;</span><span class="token variable">)</span></span>\n\n<span class="token number">1</span>. security cms -D -i <span class="token string">&quot;<span class="token variable">$path_to_mobileprovision</span>&quot;</span>\n获取描述文件信息， 描述文件位置 <span class="token punctuation">[</span>~/Library/MobileDevice/Provisioning Profiles/xxx.mobileprovision<span class="token punctuation">]</span>\n\n<span class="token number">2</span>. /usr/libexec/PlistBuddy -c <span class="token string">&#39;Print :DeveloperCertificates:0&#39;</span> \n提取描述文件内证书信息\n\n<span class="token number">3</span>. openssl x509 -inform DER -noout -subject\ndecode 证书信息， 内容格式一般为： <span class="token assign-left variable">subject</span><span class="token operator">=</span> /<span class="token environment constant">UID</span><span class="token operator">=</span>5GZU79FW4H/CN<span class="token operator">=</span>iPhone Developer: hsh peak <span class="token punctuation">(</span>N24RAL9484<span class="token punctuation">)</span>/OU<span class="token operator">=</span>F8ARKU83W2/O<span class="token operator">=</span>AIMCOMMUNITY LIMITED/C<span class="token operator">=</span>GB\n\n<span class="token number">4</span>. <span class="token function">sed</span> -n <span class="token string">&#39;/^subject/s/^.*CN=\\(.*\\)\\/OU=.*/\\1/p&#39;</span>\n提取“CN<span class="token operator">=</span>” 和 “/OU<span class="token operator">=</span>” 之间的内容\n\n/ 界定符， 默认是<span class="token string">&#39;/&#39;</span>\nn 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令；\np 打印\n^subject 匹配以subject 开头的行\ns 标记为替换\n^.*CN<span class="token operator">=</span><span class="token punctuation">\\</span><span class="token punctuation">(</span>.*<span class="token punctuation">\\</span><span class="token punctuation">)</span><span class="token punctuation">\\</span>/OU<span class="token operator">=</span>.* 匹配 “CN<span class="token operator">=</span>” 和 “/OU<span class="token operator">=</span>” 之间的内容\n<span class="token punctuation">\\</span><span class="token number">1</span> 保存匹配的内容\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料：</h4>',8),_={href:"https://stackoverflow.com/questions/26124650/sed-use-expected-context-address",target:"_blank",rel:"noopener noreferrer"},$=(0,a.Uk)("sed use: expected context address"),U={href:"https://stackoverflow.com/questions/12833714/the-concept-of-hold-space-and-pattern-space-in-sed",target:"_blank",rel:"noopener noreferrer"},O=(0,a.Uk)('The concept of "Hold space" and "Pattern space" in sed'),q={href:"https://stackoverflow.com/questions/26056438/more-than-one-number-or-g-in-substitute-flags",target:"_blank",rel:"noopener noreferrer"},C=(0,a.Uk)("more than one number or g in substitute flags"),D={href:"http://man.linuxde.net/sed",target:"_blank",rel:"noopener noreferrer"},H=(0,a.Uk)("sed命令"),P={href:"http://www.gnu.org/software/sed/manual/sed.html#Overview",target:"_blank",rel:"noopener noreferrer"},N=(0,a.Uk)("sed command"),W={},j=(0,n(3744).Z)(W,[["render",function(s,e){const n=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a._)("p",null,[c,o,p,r,t,(0,a._)("a",d,[i,(0,a.Wm)(n)]),u]),b,(0,a._)("h4",m,[g,h,(0,a._)("a",v,[x,(0,a.Wm)(n)])]),k,(0,a._)("p",null,[f,(0,a._)("a",y,[I,(0,a.Wm)(n)]),M]),w,(0,a._)("p",null,[(0,a._)("a",_,[$,(0,a.Wm)(n)])]),(0,a._)("p",null,[(0,a._)("a",U,[O,(0,a.Wm)(n)])]),(0,a._)("p",null,[(0,a._)("a",q,[C,(0,a.Wm)(n)])]),(0,a._)("p",null,[(0,a._)("a",D,[H,(0,a.Wm)(n)])]),(0,a._)("p",null,[(0,a._)("a",P,[N,(0,a.Wm)(n)])])],64)}]])},3744:(s,e)=>{e.Z=(s,e)=>{for(const[n,a]of e)s[n]=a;return s}}}]);