"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1711],{8281:(n,e,r)=>{r.r(e),r.d(e,{data:()=>a});const a={key:"v-2aea19b5",path:"/data-structure/sort.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"目录",slug:"目录",children:[]},{level:3,title:"二分查找法",slug:"二分查找法",children:[]},{level:3,title:"冒泡排序",slug:"冒泡排序",children:[]},{level:3,title:"快速排序",slug:"快速排序",children:[]},{level:3,title:"插入排序",slug:"插入排序",children:[]},{level:3,title:"鸡尾酒排序",slug:"鸡尾酒排序",children:[]},{level:3,title:"选择排序",slug:"选择排序",children:[]}],filePathRelative:"data-structure/sort.md",git:{updatedTime:163395553e4,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},1080:(n,e,r)=>{r.r(e),r.d(e,{default:()=>Fn});var a=r(6252),s=r(2259);const l=(0,a._)("h3",{id:"目录",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#目录","aria-hidden":"true"},"#"),(0,a.Uk)(" 目录")],-1),i=(0,a._)("p",null,[(0,a._)("a",{href:"#binary-search"},"1. 二分查找法")],-1),_=(0,a._)("p",null,[(0,a._)("a",{href:"#bubble-sort"},"2. 冒泡排序")],-1),b=(0,a._)("p",null,[(0,a._)("a",{href:"#quick-sort"},"3. 快速排序")],-1),t=(0,a._)("p",null,[(0,a._)("a",{href:"#insert-sort"},"4. 插入排序")],-1),u=(0,a._)("p",null,[(0,a._)("a",{href:"#cock-tail-sort"},"5. 鸡尾酒排序")],-1),c=(0,a._)("p",null,[(0,a._)("a",{href:"#section-sort"},"6. 选择排序")],-1),m=(0,a._)("h3",{id:"二分查找法",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#二分查找法","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"binary-search"}),(0,a.Uk)("二分查找法")],-1),p=(0,a._)("p",null,[(0,a._)("strong",null,"适用范围："),(0,a.Uk)(" 当数据量很大适宜采用该方法。")],-1),o=(0,a._)("p",null,[(0,a._)("strong",null,"前提条件："),(0,a.Uk)(" 数据需是排好序的")],-1),d=(0,a._)("p",null,[(0,a._)("strong",null,"基本思想："),(0,a.Uk)(" 假设数据是按升序排序的，对于给定值x，从序列的中间位置开始比较，如果当前位置值等于x，则查找成功；若x小于当前位置值，则在数列的前半段 中查找；若x大于当前位置值则在数列的后半段中继续查找，直到找到为止。")],-1),g=(0,a._)("p",null,[(0,a._)("strong",null,"代码实现：")],-1),S=(0,a._)("div",{class:"language-oc ext-oc line-numbers-mode"},[(0,a._)("pre",{class:"language-oc"},[(0,a._)("code",null,"// Sort.m\n+ (NSInteger)binarySearch:(NSArray *)array target:(id)key {\n    NSMutableArray *arr = [NSMutableArray arrayWithArray:array];\n    NSInteger left = 0;\n    NSInteger right = [arr count] - 1;\n\n    while (right >= left) {\n        // NSInteger middle = (right + left) / 2; 如果right的值快要溢出边界，该操作会导致值溢出\n        NSInteger middle = right / 2 + left / 2;\n        if (arr[middle] == key) {\n            return middle;\n        } else if (arr[middle] > key) {\n            right = middle - 1;\n        } else if (arr[middle] < key) {\n            left = middle + 1;\n        }\n    }\n    return -1;\n}\n\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"19"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"20"),(0,a._)("br")])],-1),x=(0,a._)("p",null,"测试：",-1),h=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,'NSInteger binary = [Sort binarySearch:@[@"2",@"5",@"6",@"8",@"9", @"12"] target:@"8"];\nNSLog(@"%ld",binary);\n')]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br")])],-1),y=(0,a._)("h3",{id:"冒泡排序",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#冒泡排序","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"bubble-sort"}),(0,a.Uk)("冒泡排序")],-1),k=(0,a._)("strong",null,"参考:",-1),f=(0,a.Uk)(),j={href:"https://mp.weixin.qq.com/s/wO11PDZSM5pQ0DfbQjKRQA",target:"_blank",rel:"noopener noreferrer"},N=(0,a.Uk)("冒泡排序"),A=(0,a._)("p",null,[(0,a._)("strong",null,"基本思想：使用双循环来进行排序。外部循环控制所有的回合，内部循环代表每一轮的冒泡处理，先进行元素比较，再进行元素交换")],-1),I=(0,a._)("p",null,[(0,a._)("strong",null,"代码实现：")],-1),O=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"// Sort.m\n+ (NSMutableArray *)bubbleSort:(NSArray *)array {\n    NSMutableArray *arr = [NSMutableArray arrayWithArray:array];\n    for (int i = 0; i < arr.count; i++) {\n        for (int j = 0; j < [arr count] - i - 1; j++) {\n            if ([arr[j] intValue] > [arr[j+1] intValue]) { // 升序排列\n                [arr exchangeObjectAtIndex:j withObjectAtIndex:j + 1];\n            }\n        }\n    }\n    return arr;\n}\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br")])],-1),v=(0,a._)("p",null,[(0,a.Uk)("代码优化1："),(0,a._)("strong",null,"判断如果数列已经有序，并且做出标记，剩下的几轮排序就可以不必执行，提早结束工作")],-1),U=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"// Sort.m\n+ (NSMutableArray *)bubbleSortOptimize1:(NSArray *)array {\n    NSMutableArray *arr = [NSMutableArray arrayWithArray:array];\n    for (int i = 0; i < arr.count; i++) {\n        BOOL isSorted = YES; // 标记是否有序\n        for (int j = 0; j < arr.count - i - 1; j++) {\n            if ([arr[j] intValue] > [arr[j+1] intValue]) { // 升序排列\n                [arr exchangeObjectAtIndex:j withObjectAtIndex:j + 1];\n                // 有元素交换，所以不是有序，标记变为NO\n                isSorted = NO;\n            }\n            \n        }\n        if (isSorted) break;\n    }\n    return arr;\n}\n\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br")])],-1),E=(0,a._)("p",null,[(0,a.Uk)("代码优化2："),(0,a._)("strong",null,"判断有序区间")],-1),w=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"// Sort.m\n+ (NSMutableArray *)bubbleSortOptimize2:(NSArray *)array {\n    NSMutableArray *arr = [NSMutableArray arrayWithArray:array];\n    NSInteger lastExchangeIndex = 0; // 记录最后一次交换的位置\n    NSInteger sortBorder = arr.count - 1; // 无序数列的边界，每次比较只需要比到这里为止\n    for (int i = 0; i < arr.count; i++) {\n        BOOL isSorted = YES; // 标记是否有序\n        for (int j = 0; j < sortBorder; j++) {\n            if ([arr[j] intValue] > [arr[j+1] intValue]) {\n                [arr exchangeObjectAtIndex:j withObjectAtIndex:j + 1];\n                // 有元素交换，所以不是有序，标记变为NO\n                isSorted = NO;\n                // 把无序数列的边界更新为最后一次交换元素的位置\n                lastExchangeIndex = j;\n            }\n        }\n        sortBorder = lastExchangeIndex;\n        if (isSorted) break;\n    }\n    return arr;\n}\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"19"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"20"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"21"),(0,a._)("br")])],-1),M=(0,a._)("p",null,"测试：",-1),L=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,'NSMutableArray *array = [NSMutableArray arrayWithObjects:@3, @4, @2, @1, @5, @6, @7, @8, nil];\n        \nNSLog(@"bubble sort = %@", [Sort bubbleSort:array]);\nNSLog(@"bubble sort optimize1 = %@", [Sort bubbleSortOptimize1:array]);\nNSLog(@"bubble sort optimize2 = %@", [Sort bubbleSortOptimize2:array]);\nNSLog(@"origin array = %@", array);\n')]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br")])],-1),B=(0,a._)("h3",{id:"快速排序",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#快速排序","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"quick-sort"}),(0,a.Uk)("快速排序")],-1),q=(0,a._)("strong",null,"参考：",-1),z=(0,a.Uk)(),W={href:"https://mp.weixin.qq.com/s/PQLC7qFjb74kt6PdExP8mw",target:"_blank",rel:"noopener noreferrer"},T=(0,a.Uk)("快速排序"),V={href:"https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},Y=(0,a.Uk)("快速排序"),D=(0,a.Uk)("使用"),F=(0,a._)("code",null,"分治法",-1),Q=(0,a.Uk)("（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。"),C=(0,a._)("p",null,[(0,a._)("strong",null,"步骤为"),(0,a.Uk)("：")],-1),P=(0,a._)("ol",null,[(0,a._)("li",null,"从数列中挑出一个元素，称为“基准”（pivot），"),(0,a._)("li",null,"重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分割结束之后，该基准就处于数列的中间位置。这个称为分割（partition）操作。"),(0,a._)("li",null,"递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。")],-1),R=(0,a._)("p",null,[(0,a._)("strong",null,"代码实现：")],-1),Z=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"// Sort.m\n+ (void)quickSort:(NSMutableArray *)array startIndex:(NSInteger)startIndex endIndex:(NSInteger)endIndex {\n    if (startIndex >= endIndex) {\n        return;\n    }\n    NSInteger left = startIndex;\n    NSInteger right = endIndex;\n    // 取第一个位置的元素作为基准元素\n    NSInteger pivot = [array[startIndex] integerValue];\n    // 坑的位置，初始等于pivot的位置\n    NSInteger index = startIndex;\n    \n    //大循环在左右指针重合或者交错时结束\n    while (right >= left) {\n        //right指针从右向左进行比较\n        while (right >= left) {\n            if ([array[right] integerValue] < pivot) {\n                [array exchangeObjectAtIndex:left withObjectAtIndex:right];\n                index = right;\n                left++;\n                break;\n            }\n            right--;\n        }\n        \n        //left指针从左向右进行比较\n        while (right >= left) {\n            if ([array[left] integerValue] > pivot) {\n                [array exchangeObjectAtIndex:right withObjectAtIndex:left];\n                index = left;\n                right--;\n                break;\n            }\n            left++;\n        }\n    }\n    array[index] = @(pivot);\n    \n    [self quickSort:array startIndex:startIndex endIndex:index - 1];\n    [self quickSort:array startIndex:index + 1 endIndex:endIndex];\n}\n\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"19"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"20"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"21"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"22"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"23"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"24"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"25"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"26"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"27"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"28"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"29"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"30"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"31"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"32"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"33"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"34"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"35"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"36"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"37"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"38"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"39"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"40"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"41"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"42"),(0,a._)("br")])],-1),H=(0,a._)("p",null,"测试：",-1),K=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,'NSMutableArray *quickArray = [NSMutableArray arrayWithObjects:@4, @7, @6, @5, @9, @3, @2, @8, @1, nil];\n\nNSLog(@"before quick sort = %@", quickArray);\n[Sort quickSort:quickArray startIndex:0 endIndex:quickArray.count - 1];\nNSLog(@"after quick sort = %@", quickArray);\n')]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br")])],-1),G=(0,a._)("h3",{id:"插入排序",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#插入排序","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"insert-sort"}),(0,a.Uk)("插入排序")],-1),J=(0,a._)("strong",null,"参考：",-1),X=(0,a.Uk)(),$={href:"https://blog.51cto.com/9217856/1563523",target:"_blank",rel:"noopener noreferrer"},nn=(0,a.Uk)("插入排序"),en={href:"https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},rn=(0,a.Uk)("插入排序"),an=(0,a.Uk)("（Insertion Sort）是一种简单直观的排序算法。"),sn=(0,a._)("p",null,"它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。",-1),ln=(0,a._)("p",null,[(0,a.Uk)("插入排序在实现上，通常采用in-place排序（即只需用到"),(0,a._)("code",null,"O(1)"),(0,a.Uk)("的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。")],-1),_n=(0,a._)("p",null,[(0,a._)("img",{src:s,alt:"使用插入排序为一列数字进行排序的过程"})],-1),bn=(0,a._)("p",null,"具体算法描述如下：",-1),tn=(0,a._)("ol",null,[(0,a._)("li",null,"从第一个元素开始，该元素可以认为已经被排序"),(0,a._)("li",null,"取出下一个元素，在已经排序的元素序列中从后向前扫描"),(0,a._)("li",null,[(0,a.Uk)("如果该元素（"),(0,a._)("code",null,"已排序"),(0,a.Uk)("）大于新元素，将该元素移到下一位置")]),(0,a._)("li",null,"重复步骤3，直到找到已排序的元素小于或者等于新元素的位置"),(0,a._)("li",null,"将新元素插入到该位置后"),(0,a._)("li",null,"重复步骤2~5")],-1),un=(0,a._)("p",null,"适用范围：需要排序的数据量很小；或者若已知输入元素大致上按照顺序排列",-1),cn=(0,a._)("p",null,"不适用范围：插入排序不适合对于数据量比较大的排序应用",-1),mn=(0,a._)("p",null,[(0,a._)("strong",null,"代码实现：")],-1),pn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"// Sort.m\n+ (void)insertSort:(NSMutableArray *)array {\n    \n    for (int i = 1; i < array.count; i++) {\n        NSNumber *key = array[i];\n        int j = i - 1;\n        while (j >= 0 && [array[j] compare:key] == NSOrderedDescending) {\n            [array exchangeObjectAtIndex:j + 1 withObjectAtIndex:j];\n            j--;\n        }\n        array[j + 1] = key;\n    }\n}\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br")])],-1),on=(0,a._)("p",null,"测试：",-1),dn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,'NSMutableArray *insertArray = [NSMutableArray arrayWithObjects:@3, @2, @6, @9, @8, @5, @7, @1, @4, nil];\nNSLog(@"before insert sort = %@", insertArray);\n[Sort insertSort:insertArray];\nNSLog(@"after insert sort = %@", insertArray);\n')]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br")])],-1),gn=(0,a._)("h3",{id:"鸡尾酒排序",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#鸡尾酒排序","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"cock-tail-sort"}),(0,a.Uk)("鸡尾酒排序")],-1),Sn=(0,a._)("strong",null,"参考",-1),xn=(0,a.Uk)(),hn={href:"https://mp.weixin.qq.com/s/CoVZrvis6BnxBQgQrdc5kA",target:"_blank",rel:"noopener noreferrer"},yn=(0,a.Uk)("鸡尾酒排序"),kn=(0,a._)("p",null,[(0,a._)("strong",null,"优点："),(0,a.Uk)(" 在特定条件下，减少排序的回合数")],-1),fn=(0,a._)("p",null,[(0,a._)("strong",null,"缺点："),(0,a.Uk)(" 代码量几乎扩大了一倍")],-1),jn=(0,a._)("p",null,[(0,a._)("strong",null,"应用场景："),(0,a.Uk)(" 大部分元素已经有序")],-1),Nn=(0,a._)("p",null,[(0,a._)("strong",null,"代码实现：")],-1),An=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"// Sort.m\n+ (void)cockTailSort:(NSMutableArray *)array {\n    \n    for (NSInteger i = 0; i < array.count/2; i++) {\n        //有序标记，每一轮的初始是true\n        BOOL isSorted = YES;\n        //奇数轮，从左向右比较和交换\n        for (NSInteger j = i; j < array.count - i - 1; j++) {\n            if ([array[j] compare:array[j + 1]] == NSOrderedDescending) {\n                [array exchangeObjectAtIndex:j withObjectAtIndex:j + 1];\n                isSorted = NO;\n            }\n        }\n        if (isSorted) break;\n        \n        //偶数轮之前，重新标记为true\n        isSorted = YES;\n        //偶数轮，从右向左比较和交换\n        for (NSInteger j = array.count - i - 1; j > i; j--) {\n            if ([array[j] compare:array[j - 1]] == NSOrderedAscending) {\n                [array exchangeObjectAtIndex:j withObjectAtIndex:j - 1];\n                isSorted = NO;\n            }\n        }\n        if (isSorted) break;\n    }\n}\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"19"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"20"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"21"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"22"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"23"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"24"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"25"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"26"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"27"),(0,a._)("br")])],-1),In=(0,a._)("p",null,[(0,a._)("strong",null,"代码优化")],-1),On=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"// Sort.m\n+ (void)cockTailSortOptimize:(NSMutableArray *)array {\n    //记录右侧最后一次交换的位置\n    NSInteger lastRightExchangeIndex = 0;\n    //记录左侧最后一次交换的位置\n    NSInteger lastLeftExchangeIndex = 0;\n    //无序数列的右边界，每次比较只需要比到这里为止\n    NSInteger rightSortBorder = array.count - 1;\n    //无序数列的左边界，每次比较只需要比到这里为止\n    NSInteger leftSortBorder = 0;\n    \n    for (NSInteger i = 0; i < array.count/2; i++) {\n        \n        //有序标记，每一轮的初始是YES\n        BOOL isSorted = YES;\n        //奇数轮，从左向右比较和交换\n        for (NSInteger j = leftSortBorder; j < rightSortBorder; j++) {\n            if ([array[j] compare:array[j + 1]] == NSOrderedDescending) {\n                [array exchangeObjectAtIndex:j withObjectAtIndex:j + 1];\n                isSorted = NO;\n                lastRightExchangeIndex = j;\n            }\n        }\n        rightSortBorder = lastRightExchangeIndex;\n        if (isSorted) break;\n        \n        //偶数轮之前，重新标记为YES\n        isSorted = YES;\n        //偶数轮，从右向左比较和交换\n        for (NSInteger j = rightSortBorder; j > leftSortBorder; j--) {\n            if ([array[j] compare:array[j - 1]] == NSOrderedAscending) {\n                [array exchangeObjectAtIndex:j withObjectAtIndex:j - 1];\n                isSorted = NO;\n                lastLeftExchangeIndex = j;\n            }\n        }\n        leftSortBorder = lastLeftExchangeIndex;\n        if (isSorted) break;\n    }\n}\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"19"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"20"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"21"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"22"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"23"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"24"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"25"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"26"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"27"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"28"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"29"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"30"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"31"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"32"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"33"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"34"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"35"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"36"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"37"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"38"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"39"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"40"),(0,a._)("br")])],-1),vn=(0,a._)("p",null,"测试：",-1),Un=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,'NSMutableArray *cockTailArray = [NSMutableArray arrayWithObjects:@2, @3, @4, @5, @6, @7, @8, @1, nil];\nNSLog(@"before cock tail array = %@", cockTailArray);\n[Sort cockTailSort:cockTailArray];\nNSLog(@"after cock tail array = %@", cockTailArray);\n        \nNSMutableArray *cockTailArrayOptimize = [NSMutableArray arrayWithObjects:@2, @3, @4, @5, @6, @7, @8, @1, nil];\nNSLog(@"before cock tail array optimize = %@", cockTailArrayOptimize);\n[Sort cockTailSortOptimize:cockTailArrayOptimize];\nNSLog(@"after cock tail array optimize = %@", cockTailArrayOptimize);\n')]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br")])],-1),En=(0,a._)("h3",{id:"选择排序",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#选择排序","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("a",{name:"section-sort"}),(0,a.Uk)("选择排序")],-1),wn={href:"https://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F",target:"_blank",rel:"noopener noreferrer"},Mn=(0,a.Uk)("选择排序"),Ln=(0,a.Uk)("（Selection sort）是一种简单直观的排序算法。"),Bn=(0,a._)("p",null,"它的工作原理如下:",-1),qn=(0,a._)("p",null,"首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。",-1),zn=(0,a._)("p",null,[(0,a.Uk)("选择排序的主要优点与"),(0,a._)("code",null,"数据移动"),(0,a.Uk)("有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对"),(0,a._)("code",null,"n"),(0,a.Uk)("个元素的表进行排序总共进行至多"),(0,a._)("code",null,"n-1"),(0,a.Uk)("次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。")],-1),Wn=(0,a._)("p",null,[(0,a._)("strong",null,"代码实现")],-1),Tn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,"// Sort.m\n+ (void)sectionSort:(NSMutableArray *)array {\n    for (NSInteger i = 0; i < array.count - 1; i++) {\n        NSInteger min = i;\n        for (NSInteger j = i + 1; j < array.count; j++) {\n            if ([array[j] compare:array[min]] == NSOrderedAscending) {\n                min = j;\n            }\n        }\n        [array exchangeObjectAtIndex:i withObjectAtIndex:min];\n    }\n}\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br")])],-1),Vn=(0,a._)("p",null,"测试：",-1),Yn=(0,a._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,a._)("pre",{class:"language-text"},[(0,a._)("code",null,'NSMutableArray *sectionArray = [NSMutableArray arrayWithObjects:@2, @3, @4, @5, @6, @7, @8, @1, nil];\nNSLog(@"before section array = %@", sectionArray);\n[Sort sectionSort:sectionArray];\nNSLog(@"after section array = %@", sectionArray);\n')]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br")])],-1),Dn={},Fn=(0,r(3744).Z)(Dn,[["render",function(n,e){const r=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,i,_,b,t,u,c,m,p,o,d,g,S,x,h,y,(0,a._)("p",null,[k,f,(0,a._)("a",j,[N,(0,a.Wm)(r)])]),A,I,O,v,U,E,w,M,L,B,(0,a._)("p",null,[q,z,(0,a._)("a",W,[T,(0,a.Wm)(r)])]),(0,a._)("p",null,[(0,a._)("a",V,[Y,(0,a.Wm)(r)]),D,F,Q]),C,P,R,Z,H,K,G,(0,a._)("p",null,[J,X,(0,a._)("a",$,[nn,(0,a.Wm)(r)])]),(0,a._)("p",null,[(0,a._)("a",en,[rn,(0,a.Wm)(r)]),an]),sn,ln,_n,bn,tn,un,cn,mn,pn,on,dn,gn,(0,a._)("p",null,[Sn,xn,(0,a._)("a",hn,[yn,(0,a.Wm)(r)])]),kn,fn,jn,Nn,An,In,On,vn,Un,En,(0,a._)("p",null,[(0,a._)("a",wn,[Mn,(0,a.Wm)(r)]),Ln]),Bn,qn,zn,Wn,Tn,Vn,Yn],64)}]])},3744:(n,e)=>{e.Z=(n,e)=>{for(const[r,a]of e)n[r]=a;return n}},2259:(n,e,r)=>{n.exports=r.p+"assets/img/Insertion_sort_animation.786cd277.gif"}}]);