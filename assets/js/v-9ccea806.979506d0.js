"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2223],{2212:(s,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a={key:"v-9ccea806",path:"/iOS/isa.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"iOS/isa.md",git:{updatedTime:1633942617e3,contributors:[{name:"peak",email:"peak@jiemogame.com",commits:1}]}}},7450:(s,e,n)=>{n.r(e),n.d(e,{default:()=>P});var a=n(6252),l=n(390);const r=(0,a._)("h4",{id:"理解-isa指针、类和元类",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#理解-isa指针、类和元类","aria-hidden":"true"},"#"),(0,a.Uk)(),(0,a._)("p",{align:"center"},"理解: ISA指针、类和元类")],-1),i=(0,a._)("p",{align:"right"},"2020-4-18",-1),c=(0,a._)("h5",{id:"isa指针",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#isa指针","aria-hidden":"true"},"#"),(0,a.Uk)(" isa指针")],-1),b=(0,a._)("blockquote",null,[(0,a._)("p",null,"每一个对象都是一个类的实例。在 Objective-C 语言的内部，每一个对象都有一个名为 isa 的指针，指向该对象的类。")],-1),_=(0,a._)("h5",{id:"类",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#类","aria-hidden":"true"},"#"),(0,a.Uk)(" 类")],-1),t=(0,a._)("blockquote",null,[(0,a._)("p",null,"每一个类描述了一系列它的实例的特点，包括成员变量的列表，成员函数的列表等。每一个对象都可以接受消息，而对象能够接收的消息列表是保存在它所对应的类中。")],-1),u=(0,a._)("h5",{id:"元类",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#元类","aria-hidden":"true"},"#"),(0,a.Uk)(" 元类:")],-1),o=(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a.Uk)("元类是类对象的类。类对象的 "),(0,a._)("code",null,"isa"),(0,a.Uk)(" 指针指向元类。元类的isa指针指向根元类， 根元类的 "),(0,a._)("code",null,"isa"),(0,a.Uk)(" 指针指向自己。元类保存了类方法的列表。类方法调用时，通过类的 "),(0,a._)("code",null,"isa"),(0,a.Uk)(" 指针在元类中获取方法的实现，如果没有，则该元类会向它的父类查找该方法，直到一直找到继承链的头。")])],-1),m=(0,a._)("p",null,"描述继承关系的如下所示:",-1),p=(0,a._)("p",null,[(0,a._)("img",{src:l,alt:"图片"})],-1),d=(0,a._)("p",null,"在实现中，Root Class 是指 NSObject，我们可以从图中看出：",-1),g=(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("p",null,"NSObject 的元类继承自 NSObject 类。")]),(0,a._)("li",null,[(0,a._)("p",null,"元类的 isa 指针指向根元类。")])],-1),h=(0,a._)("h5",{id:"代码说明",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#代码说明","aria-hidden":"true"},"#"),(0,a.Uk)(" 代码说明")],-1),f=(0,a._)("div",{class:"language-objective ext-objective line-numbers-mode"},[(0,a._)("pre",{class:"language-objective"},[(0,a._)("code",null,'#import <objc/runtime.h>\n\nvoid ReportFunction(id self, SEL _cmd)\n{\n    NSLog(@"This object is %p.", self);\n    NSLog(@"Class is %@, and super is %@.", [self class], [self superclass]);\n    \n    Class currentClass = [self class];\n    for (int i = 1; i < 6; i++)\n    {\n        NSLog(@"Following the isa pointer %d times gives %p, is meta class [%@]",\n              i,\n              currentClass,\n              class_isMetaClass(currentClass) ? @"true" : @"false");\n        currentClass = object_getClass(currentClass);\n    }\n    NSLog(@"NSObject\'s class is %p", [NSObject class]);\n    NSLog(@"NSObject\'s meta class is %p", object_getClass([NSObject class]));\n}\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n      \t// 动态创建一个子类\n        Class newClass = objc_allocateClassPair([NSError class], "RuntimeErrorSubclass", 0);\n      \t// 添加一个方法\n        SEL sel = NSSelectorFromString(@"report");\n        class_addMethod(newClass, sel, (IMP)ReportFunction, "v@:");\n        // 注册该类，方便后续使用\n        objc_registerClassPair(newClass);\n            \n         id instanceOfNewClass = [[newClass alloc] initWithDomain:@"someDomain" code:0 userInfo:nil];\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored   "-Warc-performSelector-leaks"\n           [instanceOfNewClass performSelector:sel];\n#pragma clang diagnostic pop\n    }\n    return 0;\n}\n')]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"10"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"11"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"12"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"13"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"14"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"15"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"16"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"17"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"18"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"19"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"20"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"21"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"22"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"23"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"24"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"25"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"26"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"27"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"28"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"29"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"30"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"31"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"32"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"33"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"34"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"35"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"36"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"37"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"38"),(0,a._)("br")])],-1),j=(0,a._)("p",null,"输出结果如下:",-1),v=(0,a._)("div",{class:"language-objective ext-objective line-numbers-mode"},[(0,a._)("pre",{class:"language-objective"},[(0,a._)("code",null,"This object is 0x10064f160.\nClass is RuntimeErrorSubclass, and super is NSError.\nFollowing the isa pointer 1 times gives 0x10064ea80,    is meta class [false]\nFollowing the isa pointer 2 times gives 0x10064eab0,    is meta class [true]\nFollowing the isa pointer 3 times gives 0x7fff9510e0f0, is meta class [true]\nFollowing the isa pointer 4 times gives 0x7fff9510e0f0, is meta class [true]\nFollowing the isa pointer 5 times gives 0x7fff9510e0f0, is meta class [true]\nNSObject's class is 0x7fff9510e118\nNSObject's meta class is 0x7fff9510e0f0\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"6"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"7"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"8"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"9"),(0,a._)("br")])],-1),C=(0,a._)("p",null,"输出结果说明:",-1),S=(0,a._)("blockquote",null,[(0,a._)("p",null,"元类的isa指针指向根元类"),(0,a._)("p",null,"根元类的isa指针指向自己"),(0,a._)("p",null,"NSObject的元类就是根元类")],-1),k=(0,a._)("h5",{id:"api-说明",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#api-说明","aria-hidden":"true"},"#"),(0,a.Uk)(" API 说明:")],-1),x=(0,a._)("div",{class:"language-objective ext-objective line-numbers-mode"},[(0,a._)("pre",{class:"language-objective"},[(0,a._)("code",null,"Class objc_getClass(const char * name);\n// 返回类对象\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br")])],-1),N=(0,a._)("div",{class:"language-objective ext-objective line-numbers-mode"},[(0,a._)("pre",{class:"language-objective"},[(0,a._)("code",null,"Class object_getClass(id obj);\n// 返回isa指针\n// 1. obj 是实例对象，返回类对象的isa指针\n// 2. obj 是类对象，返回(meta-class)元类的isa指针\n// 3. obj 是元类，返回根元类的isa指针\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br")])],-1),w=(0,a._)("div",{class:"language-objective ext-objective line-numbers-mode"},[(0,a._)("pre",{class:"language-objective"},[(0,a._)("code",null,"+ (Class)class;\n// 返回类对象\n\n- (Class)class;\n// 返回类对象\n")]),(0,a._)("div",{class:"line-numbers"},[(0,a._)("span",{class:"line-number"},"1"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"2"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"3"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"4"),(0,a._)("br"),(0,a._)("span",{class:"line-number"},"5"),(0,a._)("br")])],-1),O=(0,a._)("h5",{id:"参考文章",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),(0,a.Uk)(" 参考文章")],-1),U={href:"http://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html",target:"_blank",rel:"noopener noreferrer"},F=(0,a.Uk)("What is a meta-class in Objective-C"),L={href:"https://blog.devtang.com/2013/10/15/objective-c-object-model/",target:"_blank",rel:"noopener noreferrer"},E=(0,a.Uk)("Objective-C对象模型及应用"),R={},P=(0,n(3744).Z)(R,[["render",function(s,e){const n=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[r,i,c,b,_,t,u,o,m,p,d,g,h,f,j,v,C,S,k,x,N,w,O,(0,a._)("p",null,[(0,a._)("a",U,[F,(0,a.Wm)(n)])]),(0,a._)("p",null,[(0,a._)("a",L,[E,(0,a.Wm)(n)])])],64)}]])},3744:(s,e)=>{e.Z=(s,e)=>{for(const[n,a]of e)s[n]=a;return s}},390:(s,e,n)=>{s.exports=n.p+"assets/img/class_diagram.11bd6f6e.png"}}]);